# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master
- upstream

pool:
  vmImage: 'windows-latest'
  

  

steps:
# - task: NuGetToolInstaller@1
# - task: UseDotNet@2
#   displayName: 'use .net core 3.1 sdk '
#   inputs:
#     version: '3.1.x'

# - task: DotNetCoreCLI@2
#   displayName: 'restore packages'
#   inputs:    
#     command: 'restore'
#     projects: '*.sln'
#     feedsToUse: 'select'
#     vstsFeed: '9df4ab41-810c-4448-b1ec-b7e3b639b1ee'
# - task: DotNetCoreCLI@2
#   displayName: 'build solution'
#   inputs:
#     command: 'build'
#     arguments: '--no-restore'
#     projects: '*.sln'
# - task: DotNetCoreCLI@2
#   displayName: 'run unit tests'
#   inputs:
#     command: 'test'
#     arguments: '--no-restore'
#     projects: 'tests\UnitTests\**\*.Tests.csproj'
# - task: DotNetCoreCLI@2
#   displayName: 'run integration tests'
#   inputs:
#     command: 'test'
#     arguments: '--no-restore'
#     projects: 'tests\IntegrationTests\**\*.Tests.csproj'
    
# - task: DotNetCoreCLI@2
#   displayName: 'publish desktop project'
#   inputs:
#     command: 'publish'
#     publishWebProjects: false
#     projects: 'src/Presentation/Desktop/Desktop.csproj'
#     arguments: '-c Release -f netcoreapp3.1 -r win-x86 /p:PublishSingleFile=true /p:PublishTrimmed=true --self-contained true'
#     zipAfterPublish: false
#     modifyOutputPath: false
    
# - task: DotNetCoreCLI@2
#   displayName: 'publish web api project'
#   inputs:
#     command: 'publish'
#     publishWebProjects: true
#     projects: 'src/Presentation/Api/Api.csproj'
#     arguments: '-c Release -f netcoreapp3.1'   
- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'Pago pelo Uso (896897bf-53c5-46eb-9f45-5c90d6f67fab)'
    KeyVaultName: 'adnanioricce-dev-keys'
    SecretsFilter: '*'
- task: DownloadSecureFile@1
  displayName: 'Get the pfx certificate'
  name: signingCertPath
  inputs:
    secureFile: 'DHsys.pfx'
- task: PowerShell@2
  
  displayName: 'packaging and package sign'
  inputs:    
    targetType: 'inline'
    script: |
      Write-Host "Start adding the PFX file to the certificate store."
      Write-Host $(DHsysPackCert)
      # Write-Host $(signingCertPath)
      Write-Host '$(DHsysPackCert)'
      Write-Host $(packSignPassword)
      # Write-Host '$(signingCertPath)'
      $pfxpath = '$(DHsysPackCert)'
      $password = '$(packSignPassword)'
      $app_path = './src/Presentation/Desktop/'

      Add-Type -AssemblyName System.Security
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($(DHsysPackCert), $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
      $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
      $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
      $store.Add($cert)
      $store.Close()
      # Write your PowerShell commands here.
      C:\'Program Files (x86)'\'Windows Kits'\10\bin\10.0.17763.0\x86\makeappx pack /v /h SHA256 /d $app_path /p DHsys.msix
      Write-Host "Application was packaged successfully"
      C:\'Program Files (x86)'\'Windows Kits'\10\bin\10.0.17763.0\x86\signtool sign /fd SHA256 /a /f $packSignPassword /p $(packSignPassword) $(Build.ArtifactStagingDirectory)/DHsys.msix
      Write-Host "Packaged Signed successfully"   
    