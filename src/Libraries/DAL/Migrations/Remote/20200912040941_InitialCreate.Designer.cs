// <auto-generated />
using System;
using DAL.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DAL.Migrations.Remote
{
    [DbContext(typeof(RemoteContext))]
    [Migration("20200912040941_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddressState")
                        .HasColumnType("text");

                    b.Property<string>("Addressnumber")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 38, DateTimeKind.Unspecified).AddTicks(9507), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("FirstAddressLine")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 38, DateTimeKind.Unspecified).AddTicks(9839), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("SecondAddressLine")
                        .HasColumnType("text");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<string>("Zipcode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Core.Entities.Catalog.DrugInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CounterIndication")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 68, DateTimeKind.Unspecified).AddTicks(7749), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int?>("DrugId")
                        .HasColumnType("integer");

                    b.Property<string>("HowToUse")
                        .HasColumnType("text");

                    b.Property<string>("HowWorks")
                        .HasColumnType("text");

                    b.Property<string>("Indication")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 68, DateTimeKind.Unspecified).AddTicks(8154), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int?>("MinimalAgeOfUse")
                        .HasColumnType("integer");

                    b.Property<string>("ProfessionalBule")
                        .HasColumnType("text");

                    b.Property<string>("Substances")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfUse")
                        .HasColumnType("text");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<string>("UserBule")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugInformation");
                });

            modelBuilder.Entity("Core.Entities.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BarCode")
                        .HasColumnType("text");

                    b.Property<string>("Commission")
                        .HasColumnType("text");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 68, DateTimeKind.Unspecified).AddTicks(408), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("EndCustomerPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ICMS")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 68, DateTimeKind.Unspecified).AddTicks(838), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("MainSupplierName")
                        .HasColumnType("text");

                    b.Property<decimal>("MaxDiscountPercentage")
                        .HasColumnType("numeric");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("integer");

                    b.Property<string>("Ncm")
                        .HasColumnType("text");

                    b.Property<int?>("ProdutoId")
                        .HasColumnType("varchar");

                    b.Property<int?>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("ReorderQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("SavingPercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("Section")
                        .HasColumnType("text");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 75, DateTimeKind.Unspecified).AddTicks(1678), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<decimal>("EndCustomerDrugPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 75, DateTimeKind.Unspecified).AddTicks(2218), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<DateTimeOffset?>("Pricestartdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductShelfLife", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 75, DateTimeKind.Unspecified).AddTicks(9155), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 75, DateTimeKind.Unspecified).AddTicks(9616), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StockEntryId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductShelfLife");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductStockEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 76, DateTimeKind.Unspecified).AddTicks(6605), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 76, DateTimeKind.Unspecified).AddTicks(7110), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("StockEntryId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockEntryId");

                    b.ToTable("ProductStockEntry");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 77, DateTimeKind.Unspecified).AddTicks(9607), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 78, DateTimeKind.Unspecified).AddTicks(570), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSupplier");
                });

            modelBuilder.Entity("Core.Entities.Financial.Beneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 67, DateTimeKind.Unspecified).AddTicks(1000), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 67, DateTimeKind.Unspecified).AddTicks(1459), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Beneficiaries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Beneficiary");
                });

            modelBuilder.Entity("Core.Entities.Financial.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("integer");

                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 37, DateTimeKind.Unspecified).AddTicks(7278), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 37, DateTimeKind.Unspecified).AddTicks(7832), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("PersonType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Agenda", b =>
                {
                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Cidade")
                        .HasColumnName("cidade")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("agenda","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Agenda2", b =>
                {
                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Cidade")
                        .HasColumnName("cidade")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.ToTable("agenda (2)","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Balcon", b =>
                {
                    b.Property<string>("Bacodi")
                        .HasColumnName("bacodi")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<decimal?>("Bacomi")
                        .HasColumnName("bacomi")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Badevol")
                        .HasColumnName("badevol")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Banome")
                        .HasColumnName("banome")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("ComisAce")
                        .HasColumnName("comis_ace")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("ComisBo")
                        .HasColumnName("comis_bo")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("ComisEti")
                        .HasColumnName("comis_eti")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("ComisOut")
                        .HasColumnName("comis_out")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("ComisPer")
                        .HasColumnName("comis_per")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("ComisPerc")
                        .HasColumnName("comis_perc")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("ComisVar")
                        .HasColumnName("comis_var")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Cpf")
                        .HasColumnName("cpf")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Senha")
                        .HasColumnName("senha")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("balcon","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Brindes", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("Pontos")
                        .HasColumnName("pontos")
                        .HasColumnType("numeric(4,0)");

                    b.Property<decimal?>("Qtde")
                        .HasColumnName("qtde")
                        .HasColumnType("numeric(4,0)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("brindes","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Cadlab", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DtAlter")
                        .HasColumnName("dt_alter")
                        .HasColumnType("date");

                    b.Property<string>("Foapel")
                        .HasColumnName("foapel")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Fobair")
                        .HasColumnName("fobair")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Focepe")
                        .HasColumnName("focepe")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Focida")
                        .HasColumnName("focida")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Focont")
                        .HasColumnName("focont")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Foende")
                        .HasColumnName("foende")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Foesta")
                        .HasColumnName("foesta")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Fofaxe")
                        .HasColumnName("fofaxe")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Foibge")
                        .HasColumnName("foibge")
                        .HasColumnType("character varying(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Fonome")
                        .HasColumnName("fonome")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Fonume")
                        .HasColumnName("fonume")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Fotel2")
                        .HasColumnName("fotel2")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Fotele")
                        .HasColumnName("fotele")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Labrev")
                        .HasColumnName("labrev")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Lacgce")
                        .HasColumnName("lacgce")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Lacodi")
                        .HasColumnName("lacodi")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Lacond")
                        .HasColumnName("lacond")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Laiest")
                        .HasColumnName("laiest")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("Laperc")
                        .HasColumnName("laperc")
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Latipo")
                        .HasColumnName("latipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Laulno")
                        .HasColumnName("laulno")
                        .HasColumnType("character varying(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Laultc")
                        .HasColumnName("laultc")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Nomarq")
                        .HasColumnName("nomarq")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("cadlab","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Cadlabold", b =>
                {
                    b.Property<DateTime?>("DtAlter")
                        .HasColumnName("dt_alter")
                        .HasColumnType("date");

                    b.Property<string>("Foapel")
                        .HasColumnName("foapel")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Focepe")
                        .HasColumnName("focepe")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Focida")
                        .HasColumnName("focida")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Focont")
                        .HasColumnName("focont")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Foende")
                        .HasColumnName("foende")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Foesta")
                        .HasColumnName("foesta")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Fofaxe")
                        .HasColumnName("fofaxe")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Fonome")
                        .HasColumnName("fonome")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Fotel2")
                        .HasColumnName("fotel2")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Fotele")
                        .HasColumnName("fotele")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Ibgeest")
                        .HasColumnName("ibgeest")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Ibgemun")
                        .HasColumnName("ibgemun")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Labrev")
                        .HasColumnName("labrev")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Lacgce")
                        .HasColumnName("lacgce")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Lacodi")
                        .HasColumnName("lacodi")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Lacond")
                        .HasColumnName("lacond")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Laiest")
                        .HasColumnName("laiest")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("Laperc")
                        .HasColumnName("laperc")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Latipo")
                        .HasColumnName("latipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Laulno")
                        .HasColumnName("laulno")
                        .HasColumnType("character varying(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Laultc")
                        .HasColumnName("laultc")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Nomarq")
                        .HasColumnName("nomarq")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.ToTable("cadlabold","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Cadprom", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Fonome")
                        .HasColumnName("fonome")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Fotele")
                        .HasColumnName("fotele")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Lacodi")
                        .HasColumnName("lacodi")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Valid")
                        .HasColumnName("valid")
                        .HasColumnType("date");

                    b.ToTable("cadprom","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Caixa", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CxAdm")
                        .HasColumnName("cx_adm")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("CxAtend")
                        .HasColumnName("cx_atend")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("CxCart")
                        .HasColumnName("cx_cart")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("CxData")
                        .HasColumnName("cx_data")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CxRec")
                        .HasColumnName("cx_rec")
                        .HasColumnType("date");

                    b.Property<string>("CxTipo")
                        .HasColumnName("cx_tipo")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("CxValor")
                        .HasColumnName("cx_valor")
                        .HasColumnType("numeric(12,2)");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("caixa","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Cancdia", b =>
                {
                    b.Property<string>("Codemp")
                        .HasColumnName("codemp")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Codfun")
                        .HasColumnName("codfun")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datac")
                        .HasColumnName("datac")
                        .HasColumnType("date");

                    b.Property<string>("Filial")
                        .HasColumnName("filial")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ticket")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("cancdia","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Cartao", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Parcel")
                        .HasColumnName("parcel")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prazo")
                        .HasColumnName("prazo")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Qtde")
                        .HasColumnName("qtde")
                        .HasColumnType("numeric(1,0)");

                    b.Property<decimal?>("Taxa")
                        .HasColumnName("taxa")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("cartao","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Cdesp", b =>
                {
                    b.Property<string>("Banco")
                        .HasColumnName("banco")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Chpag")
                        .HasColumnName("chpag")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Cont")
                        .HasColumnName("cont")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<decimal?>("Desc")
                        .HasColumnName("desc")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Doc")
                        .HasColumnName("doc")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<DateTime?>("Dtdesc")
                        .HasColumnName("dtdesc")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dtpag")
                        .HasColumnName("dtpag")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dtvenc")
                        .HasColumnName("dtvenc")
                        .HasColumnType("date");

                    b.Property<decimal?>("Jurdin")
                        .HasColumnName("jurdin")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Jurper")
                        .HasColumnName("jurper")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Multa")
                        .HasColumnName("multa")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("Vlpag")
                        .HasColumnName("vlpag")
                        .HasColumnType("numeric(9,2)");

                    b.ToTable("cdesp","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Chdevol", b =>
                {
                    b.Property<string>("Agencia")
                        .HasColumnName("agencia")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Banco")
                        .HasColumnName("banco")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Cheque")
                        .HasColumnName("cheque")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Cliente")
                        .HasColumnName("cliente")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Conta")
                        .HasColumnName("conta")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datae")
                        .HasColumnName("datae")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("chdevol","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Cheque", b =>
                {
                    b.Property<string>("Agencia")
                        .HasColumnName("agencia")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Baixa")
                        .HasColumnName("baixa")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Banco")
                        .HasColumnName("banco")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Cheque1")
                        .HasColumnName("cheque")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Cliente")
                        .HasColumnName("cliente")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Conta")
                        .HasColumnName("conta")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datae")
                        .HasColumnName("datae")
                        .HasColumnType("date");

                    b.Property<string>("Filial")
                        .HasColumnName("filial")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Obs")
                        .HasColumnName("obs")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Rg")
                        .HasColumnName("rg")
                        .HasColumnType("character varying(17)")
                        .HasMaxLength(17);

                    b.Property<string>("Situacao")
                        .HasColumnName("situacao")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Telefone")
                        .HasColumnName("telefone")
                        .HasColumnType("character varying(17)")
                        .HasMaxLength(17);

                    b.Property<string>("Ticket")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("cheque","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.CliMed", b =>
                {
                    b.Property<string>("CpfCrm")
                        .HasColumnName("cpf_crm")
                        .HasColumnType("character varying(14)")
                        .HasMaxLength(14);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Sexo")
                        .HasColumnName("sexo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("cli_med","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Clicheq", b =>
                {
                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Cidade")
                        .HasColumnName("cidade")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Cpf")
                        .HasColumnName("cpf")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datanasc")
                        .HasColumnName("datanasc")
                        .HasColumnType("date");

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Rg")
                        .HasColumnName("rg")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("clicheq","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Cliente", b =>
                {
                    b.Property<string>("Clbairro")
                        .HasColumnName("clbairro")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Clcep")
                        .HasColumnName("clcep")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Clcida")
                        .HasColumnName("clcida")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Clcodi")
                        .HasColumnName("clcodi")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<DateTime?>("Clcompra")
                        .HasColumnName("clcompra")
                        .HasColumnType("date");

                    b.Property<string>("Clcpf")
                        .HasColumnName("clcpf")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<decimal?>("Clcred")
                        .HasColumnName("clcred")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Cldebi")
                        .HasColumnName("cldebi")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Cldesc")
                        .HasColumnName("cldesc")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Cldesmed")
                        .HasColumnName("cldesmed")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Cldesper")
                        .HasColumnName("cldesper")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Clende")
                        .HasColumnName("clende")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Clestado")
                        .HasColumnName("clestado")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Cllime")
                        .HasColumnName("cllime")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("Clnasc")
                        .HasColumnName("clnasc")
                        .HasColumnType("date");

                    b.Property<string>("Clnome")
                        .HasColumnName("clnome")
                        .HasColumnType("character varying(35)")
                        .HasMaxLength(35);

                    b.Property<string>("Clobs")
                        .HasColumnName("clobs")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("Clpagto")
                        .HasColumnName("clpagto")
                        .HasColumnType("numeric(2,0)");

                    b.Property<string>("Clrg")
                        .HasColumnName("clrg")
                        .HasColumnType("character varying(19)")
                        .HasMaxLength(19);

                    b.Property<string>("Cltele")
                        .HasColumnName("cltele")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("Clupagto")
                        .HasColumnName("clupagto")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("cliente","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Clipago", b =>
                {
                    b.Property<string>("Cliente")
                        .HasColumnName("cliente")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Credito")
                        .HasColumnName("credito")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(10,2)");

                    b.ToTable("clipago","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Contas", b =>
                {
                    b.Property<string>("Cod")
                        .HasColumnName("cod")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Hist")
                        .HasColumnName("hist")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("contas","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Conv", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cvbalc")
                        .HasColumnName("cvbalc")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<decimal?>("Cvcomissao")
                        .HasColumnName("cvcomissao")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("Cvdata")
                        .HasColumnName("cvdata")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Cvdtrec")
                        .HasColumnName("cvdtrec")
                        .HasColumnType("date");

                    b.Property<string>("Cventrega")
                        .HasColumnName("cventrega")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Cvfilial")
                        .HasColumnName("cvfilial")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<DateTime?>("Cvlibcom")
                        .HasColumnName("cvlibcom")
                        .HasColumnType("date");

                    b.Property<string>("Cvnota")
                        .HasColumnName("cvnota")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Cvobsv")
                        .HasColumnName("cvobsv")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Cvpsuso")
                        .HasColumnName("cvpsuso")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Cvreceita")
                        .HasColumnName("cvreceita")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Cvtick")
                        .HasColumnName("cvtick")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Cvtitular")
                        .HasColumnName("cvtitular")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Cvvalocrz")
                        .HasColumnName("cvvalocrz")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Cvvalourv")
                        .HasColumnName("cvvalourv")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Fucdem")
                        .HasColumnName("fucdem")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Fucodi")
                        .HasColumnName("fucodi")
                        .HasColumnType("character varying(18)")
                        .HasMaxLength(18);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("conv","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Convenio", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cvbalc")
                        .HasColumnName("cvbalc")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<decimal?>("Cvcomissao")
                        .HasColumnName("cvcomissao")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("Cvdata")
                        .HasColumnName("cvdata")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Cvdtrec")
                        .HasColumnName("cvdtrec")
                        .HasColumnType("date");

                    b.Property<string>("Cventrega")
                        .HasColumnName("cventrega")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Cvfilial")
                        .HasColumnName("cvfilial")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<DateTime?>("Cvlibcom")
                        .HasColumnName("cvlibcom")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Cvmesdesc")
                        .HasColumnName("cvmesdesc")
                        .HasColumnType("date");

                    b.Property<string>("Cvnota")
                        .HasColumnName("cvnota")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Cvobsv")
                        .HasColumnName("cvobsv")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Cvpsuso")
                        .HasColumnName("cvpsuso")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Cvrec")
                        .HasColumnName("cvrec")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Cvreceita")
                        .HasColumnName("cvreceita")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Cvtick")
                        .HasColumnName("cvtick")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Cvtitular")
                        .HasColumnName("cvtitular")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Cvvalocrz")
                        .HasColumnName("cvvalocrz")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Cvvalourv")
                        .HasColumnName("cvvalourv")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Fucdem")
                        .HasColumnName("fucdem")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Fucodi")
                        .HasColumnName("fucodi")
                        .HasColumnType("character varying(18)")
                        .HasMaxLength(18);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("convenio","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Cpagar", b =>
                {
                    b.Property<string>("Banco")
                        .HasColumnName("banco")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Chpag")
                        .HasColumnName("chpag")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Cont")
                        .HasColumnName("cont")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<decimal?>("Desc")
                        .HasColumnName("desc")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Doc")
                        .HasColumnName("doc")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Dtdesc")
                        .HasColumnName("dtdesc")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dtemiss")
                        .HasColumnName("dtemiss")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dtpag")
                        .HasColumnName("dtpag")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dtvenc")
                        .HasColumnName("dtvenc")
                        .HasColumnType("date");

                    b.Property<string>("Forn")
                        .HasColumnName("forn")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<decimal?>("Jurdin")
                        .HasColumnName("jurdin")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Jurper")
                        .HasColumnName("jurper")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Multa")
                        .HasColumnName("multa")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Titulo")
                        .HasColumnName("titulo")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("Vlpag")
                        .HasColumnName("vlpag")
                        .HasColumnType("numeric(9,2)");

                    b.ToTable("cpagar","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Debcli", b =>
                {
                    b.Property<string>("Bacodi")
                        .HasColumnName("bacodi")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Clbalc")
                        .HasColumnName("clbalc")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Clcodi")
                        .HasColumnName("clcodi")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<DateTime?>("Cldata")
                        .HasColumnName("cldata")
                        .HasColumnType("date");

                    b.Property<decimal?>("Cldesc")
                        .HasColumnName("cldesc")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Clobs")
                        .HasColumnName("clobs")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Clpago")
                        .HasColumnName("clpago")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Clqtde")
                        .HasColumnName("clqtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Cltick")
                        .HasColumnName("cltick")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Comissao")
                        .HasColumnName("comissao")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descomp")
                        .HasColumnName("descomp")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DtPagto")
                        .HasColumnName("dt_pagto")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("VlPago")
                        .HasColumnName("vl_pago")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("debcli","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Delivery", b =>
                {
                    b.Property<decimal?>("Acumulado")
                        .HasColumnName("acumulado")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Aposentado")
                        .HasColumnName("aposentado")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Balcon")
                        .HasColumnName("balcon")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Cidade")
                        .HasColumnName("cidade")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Clclassi")
                        .HasColumnName("clclassi")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Clobs1")
                        .HasColumnName("clobs1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Clobs2")
                        .HasColumnName("clobs2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Cpf")
                        .HasColumnName("cpf")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datanasc")
                        .HasColumnName("datanasc")
                        .HasColumnType("date");

                    b.Property<decimal?>("Descmed")
                        .HasColumnName("descmed")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Descout")
                        .HasColumnName("descout")
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime?>("Dtcad")
                        .HasColumnName("dtcad")
                        .HasColumnType("date");

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Impresso")
                        .HasColumnName("impresso")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Rg")
                        .HasColumnName("rg")
                        .HasColumnType("character varying(19)")
                        .HasMaxLength(19);

                    b.Property<DateTime?>("UltCompra")
                        .HasColumnName("ult_compra")
                        .HasColumnType("date");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("delivery","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Despesas", b =>
                {
                    b.Property<string>("Caixa")
                        .HasColumnName("caixa")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<string>("Historico")
                        .HasColumnName("historico")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("despesas","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Empresa", b =>
                {
                    b.Property<string>("Codgolden")
                        .HasColumnName("codgolden")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DesAce")
                        .HasColumnName("des_ace")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("DesB")
                        .HasColumnName("des_b")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("DesEtic")
                        .HasColumnName("des_etic")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("DesFech")
                        .HasColumnName("des_fech")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("DesNota")
                        .HasColumnName("des_nota")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("DesPerf")
                        .HasColumnName("des_perf")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("DesRest")
                        .HasColumnName("des_rest")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("DesTick")
                        .HasColumnName("des_tick")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("DesVar")
                        .HasColumnName("des_var")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Descplac")
                        .HasColumnName("descplac")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Embair")
                        .HasColumnName("embair")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Embloq")
                        .HasColumnName("embloq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Emcep")
                        .HasColumnName("emcep")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Emcgce")
                        .HasColumnName("emcgce")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Emcida")
                        .HasColumnName("emcida")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Emcodi")
                        .HasColumnName("emcodi")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Emcont")
                        .HasColumnName("emcont")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Emcontrato")
                        .HasColumnName("emcontrato")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<decimal?>("Emdebito")
                        .HasColumnName("emdebito")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Emende")
                        .HasColumnName("emende")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Emesta")
                        .HasColumnName("emesta")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Emetico")
                        .HasColumnName("emetico")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Emfax")
                        .HasColumnName("emfax")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Emfech")
                        .HasColumnName("emfech")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Emfilial")
                        .HasColumnName("emfilial")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("EmgCorea")
                        .HasColumnType("text");

                    b.Property<string>("Emguia")
                        .HasColumnName("emguia")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Eminsc")
                        .HasColumnName("eminsc")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("Emlimite")
                        .HasColumnName("emlimite")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Emnume")
                        .HasColumnName("emnume")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Emobs")
                        .HasColumnName("emobs")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Emobs1")
                        .HasColumnName("emobs1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Emperf")
                        .HasColumnName("emperf")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Emprint")
                        .HasColumnName("emprint")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Emraso")
                        .HasColumnName("emraso")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Emreceita")
                        .HasColumnName("emreceita")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Emtele")
                        .HasColumnName("emtele")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Ibgeest")
                        .HasColumnName("ibgeest")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Ibgemun")
                        .HasColumnName("ibgemun")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Libperf")
                        .HasColumnName("libperf")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("PercDesc")
                        .HasColumnName("perc_desc")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<string>("Vidaav")
                        .HasColumnName("vidaav")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Vidalk")
                        .HasColumnName("vidalk")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Vidapc")
                        .HasColumnName("vidapc")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.ToTable("empresa","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Encomen", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Endata")
                        .HasColumnName("endata")
                        .HasColumnType("date");

                    b.Property<decimal?>("Enqtde")
                        .HasColumnName("enqtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("encomen","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Ent", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Descfin")
                        .HasColumnName("descfin")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Desconto")
                        .HasColumnName("desconto")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Descrep")
                        .HasColumnName("descrep")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("Endata")
                        .HasColumnName("endata")
                        .HasColumnType("date");

                    b.Property<decimal?>("Enqtde")
                        .HasColumnName("enqtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Envalo")
                        .HasColumnName("envalo")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Envalodes")
                        .HasColumnName("envalodes")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Estant")
                        .HasColumnName("estant")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Etiqueta")
                        .HasColumnName("etiqueta")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Fornec")
                        .HasColumnName("fornec")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Impresso")
                        .HasColumnName("impresso")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Impretq")
                        .HasColumnName("impretq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notafis")
                        .HasColumnName("notafis")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prfabr")
                        .HasColumnName("prfabr")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Soetiq")
                        .HasColumnName("soetiq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<string>("Usuario")
                        .HasColumnName("usuario")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.ToTable("ent","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Entpro", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Descfin")
                        .HasColumnName("descfin")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Desconto")
                        .HasColumnName("desconto")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Descrep")
                        .HasColumnName("descrep")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("Emissnf")
                        .HasColumnName("emissnf")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Endata")
                        .HasColumnName("endata")
                        .HasColumnType("date");

                    b.Property<decimal?>("Enqtde")
                        .HasColumnName("enqtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Envalo")
                        .HasColumnName("envalo")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Envalodes")
                        .HasColumnName("envalodes")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Estant")
                        .HasColumnName("estant")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Etiqueta")
                        .HasColumnName("etiqueta")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Fornec")
                        .HasColumnName("fornec")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Impresso")
                        .HasColumnName("impresso")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Impretq")
                        .HasColumnName("impretq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lote")
                        .HasColumnName("lote")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Notafis")
                        .HasColumnName("notafis")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prfabr")
                        .HasColumnName("prfabr")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Soetiq")
                        .HasColumnName("soetiq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<string>("Usuario")
                        .HasColumnName("usuario")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.ToTable("entpro","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Estq0045", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EstMinimo")
                        .HasColumnName("est_minimo")
                        .HasColumnType("numeric(6,0)");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prbarra")
                        .HasColumnName("prbarra")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Prcdse")
                        .HasColumnName("prcdse")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("Prestq")
                        .HasColumnName("prestq")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Secao")
                        .HasColumnName("secao")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("estq0045","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Etiqperf", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prcons")
                        .HasColumnName("prcons")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Prconsf")
                        .HasColumnName("prconsf")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Prdesc1")
                        .HasColumnName("prdesc1")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Prdesc2")
                        .HasColumnName("prdesc2")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("etiqperf","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Etiqprom", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prcons")
                        .HasColumnName("prcons")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Prconsf")
                        .HasColumnName("prconsf")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Prdesc1")
                        .HasColumnName("prdesc1")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Prdesc2")
                        .HasColumnName("prdesc2")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("etiqprom","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Etiqueta", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prcons")
                        .HasColumnName("prcons")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Prdesc1")
                        .HasColumnName("prdesc1")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Prdesc2")
                        .HasColumnName("prdesc2")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("etiqueta","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Faltas", b =>
                {
                    b.Property<string>("Balcon")
                        .HasColumnName("balcon")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("faltas","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Fechconv", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<string>("Fucdem")
                        .HasColumnName("fucdem")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(12,0)");

                    b.ToTable("fechconv","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Filial", b =>
                {
                    b.Property<string>("Aplica1")
                        .HasColumnName("aplica1")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Aplica10")
                        .HasColumnName("aplica10")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Aplica2")
                        .HasColumnName("aplica2")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Aplica3")
                        .HasColumnName("aplica3")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Aplica4")
                        .HasColumnName("aplica4")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Aplica5")
                        .HasColumnName("aplica5")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Aplica6")
                        .HasColumnName("aplica6")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Aplica7")
                        .HasColumnName("aplica7")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Aplica8")
                        .HasColumnName("aplica8")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Aplica9")
                        .HasColumnName("aplica9")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Desc1")
                        .HasColumnName("desc1")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Desc10")
                        .HasColumnName("desc10")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Desc2")
                        .HasColumnName("desc2")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Desc3")
                        .HasColumnName("desc3")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Desc4")
                        .HasColumnName("desc4")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Desc5")
                        .HasColumnName("desc5")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Desc6")
                        .HasColumnName("desc6")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Desc7")
                        .HasColumnName("desc7")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Desc8")
                        .HasColumnName("desc8")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Desc9")
                        .HasColumnName("desc9")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Filcep")
                        .HasColumnName("filcep")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Filcgce")
                        .HasColumnName("filcgce")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Filcida")
                        .HasColumnName("filcida")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Filcodi")
                        .HasColumnName("filcodi")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Filcont")
                        .HasColumnName("filcont")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Filende")
                        .HasColumnName("filende")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Filesta")
                        .HasColumnName("filesta")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Filfax")
                        .HasColumnName("filfax")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Filinsc")
                        .HasColumnName("filinsc")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Filnome")
                        .HasColumnName("filnome")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Filtele")
                        .HasColumnName("filtele")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subsec1")
                        .HasColumnName("subsec1")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Subsec10")
                        .HasColumnName("subsec10")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Subsec2")
                        .HasColumnName("subsec2")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Subsec3")
                        .HasColumnName("subsec3")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Subsec4")
                        .HasColumnName("subsec4")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Subsec5")
                        .HasColumnName("subsec5")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Subsec6")
                        .HasColumnName("subsec6")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Subsec7")
                        .HasColumnName("subsec7")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Subsec8")
                        .HasColumnName("subsec8")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Subsec9")
                        .HasColumnName("subsec9")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("filial","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Funcio", b =>
                {
                    b.Property<string>("Codgolden")
                        .HasColumnName("codgolden")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datademi")
                        .HasColumnName("datademi")
                        .HasColumnType("date");

                    b.Property<string>("Demitido")
                        .HasColumnName("demitido")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Fubai")
                        .HasColumnName("fubai")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Fubloq")
                        .HasColumnName("fubloq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Fucdem")
                        .HasColumnName("fucdem")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Fucep")
                        .HasColumnName("fucep")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Fucid")
                        .HasColumnName("fucid")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Fucodi")
                        .HasColumnName("fucodi")
                        .HasColumnType("character varying(18)")
                        .HasMaxLength(18);

                    b.Property<DateTime?>("Fudata")
                        .HasColumnName("fudata")
                        .HasColumnType("date");

                    b.Property<string>("Fudepto")
                        .HasColumnName("fudepto")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Fuend")
                        .HasColumnName("fuend")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Fuest")
                        .HasColumnName("fuest")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Fufone")
                        .HasColumnName("fufone")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Fuident")
                        .HasColumnName("fuident")
                        .HasColumnType("character varying(18)")
                        .HasMaxLength(18);

                    b.Property<decimal?>("Fulimite")
                        .HasColumnName("fulimite")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Funome")
                        .HasColumnName("funome")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Fuobs1")
                        .HasColumnName("fuobs1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fuobs2")
                        .HasColumnName("fuobs2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fuobs3")
                        .HasColumnName("fuobs3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fuplano")
                        .HasColumnName("fuplano")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Fusit")
                        .HasColumnName("fusit")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Impresso")
                        .HasColumnName("impresso")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Totdebcr")
                        .HasColumnName("totdebcr")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Totdebsr")
                        .HasColumnName("totdebsr")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("funcio","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Histor", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Desconto")
                        .HasColumnName("desconto")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Distrib")
                        .HasColumnName("distrib")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notafis")
                        .HasColumnName("notafis")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Pedido")
                        .HasColumnName("pedido")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("Recebto")
                        .HasColumnName("recebto")
                        .HasColumnType("date");

                    b.Property<decimal?>("Total")
                        .HasColumnName("total")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Vencto")
                        .HasColumnName("vencto")
                        .HasColumnType("date");

                    b.ToTable("histor","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Ibpt", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Imp1")
                        .HasColumnName("imp1")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Imp2")
                        .HasColumnName("imp2")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("ibpt","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Invent", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lote")
                        .HasColumnName("lote")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Prreg")
                        .HasColumnName("prreg")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<decimal?>("Qtde")
                        .HasColumnName("qtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Tpmed")
                        .HasColumnName("tpmed")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("invent","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Logsys", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nivel")
                        .HasColumnName("nivel")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Opcao")
                        .HasColumnName("opcao")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<string>("Usuario")
                        .HasColumnName("usuario")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.ToTable("logsys","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Malclien", b =>
                {
                    b.Property<decimal?>("Acumulado")
                        .HasColumnName("acumulado")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Aposentado")
                        .HasColumnName("aposentado")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Balcon")
                        .HasColumnName("balcon")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Cidade")
                        .HasColumnName("cidade")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Clclassi")
                        .HasColumnName("clclassi")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Clobs1")
                        .HasColumnName("clobs1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Clobs2")
                        .HasColumnName("clobs2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Cpf")
                        .HasColumnName("cpf")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datanasc")
                        .HasColumnName("datanasc")
                        .HasColumnType("date");

                    b.Property<decimal?>("Descmed")
                        .HasColumnName("descmed")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("Descout")
                        .HasColumnName("descout")
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime?>("Dtcad")
                        .HasColumnName("dtcad")
                        .HasColumnType("date");

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Filial")
                        .HasColumnName("filial")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Impresso")
                        .HasColumnName("impresso")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Rg")
                        .HasColumnName("rg")
                        .HasColumnType("character varying(19)")
                        .HasMaxLength(19);

                    b.Property<DateTime?>("UltCompra")
                        .HasColumnName("ult_compra")
                        .HasColumnType("date");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("malclien","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Merctran", b =>
                {
                    b.Property<string>("Comissao")
                        .HasColumnName("comissao")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Desconto")
                        .HasColumnName("desconto")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("Estoque")
                        .HasColumnName("estoque")
                        .HasColumnType("numeric(4,0)");

                    b.Property<string>("Etiqueta")
                        .HasColumnName("etiqueta")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prcons")
                        .HasColumnName("prcons")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Prconsd")
                        .HasColumnName("prconsd")
                        .HasColumnType("numeric(12,4)");

                    b.Property<decimal?>("Qtde")
                        .HasColumnName("qtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("merctran","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Mov", b =>
                {
                    b.Property<string>("Admcart")
                        .HasColumnName("admcart")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Bacodi")
                        .HasColumnName("bacodi")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Caixa")
                        .HasColumnName("caixa")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Cancelado")
                        .HasColumnName("cancelado")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Cartaoc")
                        .HasColumnName("cartaoc")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Cheque")
                        .HasColumnName("cheque")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Chequepre")
                        .HasColumnName("chequepre")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Codcli")
                        .HasColumnName("codcli")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Cpf")
                        .HasColumnName("cpf")
                        .HasColumnType("character varying(14)")
                        .HasMaxLength(14);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<decimal?>("Dinheiro")
                        .HasColumnName("dinheiro")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Ecf")
                        .HasColumnName("ecf")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Hora")
                        .HasColumnName("hora")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NFiscal")
                        .HasColumnName("n_fiscal")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("Popular")
                        .HasColumnName("popular")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Ticket")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("TotAnt")
                        .HasColumnName("tot_ant")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("TotVen")
                        .HasColumnName("tot_ven")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Tpvd")
                        .HasColumnName("tpvd")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("mov","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Movm", b =>
                {
                    b.Property<string>("Admcart")
                        .HasColumnName("admcart")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Bacodi")
                        .HasColumnName("bacodi")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Caixa")
                        .HasColumnName("caixa")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Cancelado")
                        .HasColumnName("cancelado")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Cartaoc")
                        .HasColumnName("cartaoc")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Cheque")
                        .HasColumnName("cheque")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Chequepre")
                        .HasColumnName("chequepre")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Codcli")
                        .HasColumnName("codcli")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<decimal?>("Dinheiro")
                        .HasColumnName("dinheiro")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Hora")
                        .HasColumnName("hora")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NFiscal")
                        .HasColumnName("n_fiscal")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Ticket")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("TotAnt")
                        .HasColumnName("tot_ant")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("TotVen")
                        .HasColumnName("tot_ven")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Tpvd")
                        .HasColumnName("tpvd")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("movm","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Movme", b =>
                {
                    b.Property<string>("Bacodi")
                        .HasColumnName("bacodi")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Cancelado")
                        .HasColumnName("cancelado")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Codcli")
                        .HasColumnName("codcli")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Pedido")
                        .HasColumnName("pedido")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Ticket")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("TotComis")
                        .HasColumnName("tot_comis")
                        .HasColumnType("numeric(12,4)");

                    b.Property<decimal?>("TotDescon")
                        .HasColumnName("tot_descon")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Tpvd")
                        .HasColumnName("tpvd")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("VlTot")
                        .HasColumnName("vl_tot")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("VlUnit")
                        .HasColumnName("vl_unit")
                        .HasColumnType("numeric(12,4)");

                    b.Property<decimal?>("Vlliquid")
                        .HasColumnName("vlliquid")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("movme","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Movmes", b =>
                {
                    b.Property<string>("Bacodi")
                        .HasColumnName("bacodi")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Cancelado")
                        .HasColumnName("cancelado")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Codcli")
                        .HasColumnName("codcli")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<string>("Ecf")
                        .HasColumnName("ecf")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Pedido")
                        .HasColumnName("pedido")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Ticket")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("TotComis")
                        .HasColumnName("tot_comis")
                        .HasColumnType("numeric(12,4)");

                    b.Property<decimal?>("TotDescon")
                        .HasColumnName("tot_descon")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Tpvd")
                        .HasColumnName("tpvd")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("VlTot")
                        .HasColumnName("vl_tot")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("VlUnit")
                        .HasColumnName("vl_unit")
                        .HasColumnType("numeric(12,4)");

                    b.Property<decimal?>("Vlliquid")
                        .HasColumnName("vlliquid")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("movmes","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Movnf", b =>
                {
                    b.Property<string>("Cancelado")
                        .HasColumnName("cancelado")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Cpf")
                        .HasColumnName("cpf")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Ecf")
                        .HasColumnName("ecf")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Ticket")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("VlTot")
                        .HasColumnName("vl_tot")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("VlUnit")
                        .HasColumnName("vl_unit")
                        .HasColumnType("numeric(12,4)");

                    b.ToTable("movnf","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Movpop", b =>
                {
                    b.Property<string>("BalcCpf")
                        .HasColumnName("balc_cpf")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<string>("Cancelado")
                        .HasColumnName("cancelado")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Compdia")
                        .HasColumnName("compdia")
                        .HasColumnType("numeric(5,0)");

                    b.Property<decimal?>("Compmes")
                        .HasColumnName("compmes")
                        .HasColumnType("numeric(5,0)");

                    b.Property<string>("Cpfcli")
                        .HasColumnName("cpfcli")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Crm")
                        .HasColumnName("crm")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datarec")
                        .HasColumnName("datarec")
                        .HasColumnType("date");

                    b.Property<string>("Ecf")
                        .HasColumnName("ecf")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Senha")
                        .HasColumnName("senha")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Ticket")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("TotDescon")
                        .HasColumnName("tot_descon")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("VlTot")
                        .HasColumnName("vl_tot")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("VlUnit")
                        .HasColumnName("vl_unit")
                        .HasColumnType("numeric(12,4)");

                    b.Property<decimal?>("Vlliquid")
                        .HasColumnName("vlliquid")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("movpop","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Natureza", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("natureza","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Newcli", b =>
                {
                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Cidade")
                        .HasColumnName("cidade")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Clclassi")
                        .HasColumnName("clclassi")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datanasc")
                        .HasColumnName("datanasc")
                        .HasColumnType("date");

                    b.Property<decimal?>("Desconto")
                        .HasColumnName("desconto")
                        .HasColumnType("numeric(2,0)");

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Impresso")
                        .HasColumnName("impresso")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Rg")
                        .HasColumnName("rg")
                        .HasColumnType("character varying(19)")
                        .HasMaxLength(19);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<DateTime?>("UltCompra")
                        .HasColumnName("ult_compra")
                        .HasColumnType("date");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("newcli","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Newconv", b =>
                {
                    b.Property<DateTime?>("Cvdata")
                        .HasColumnName("cvdata")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Cvdtrec")
                        .HasColumnName("cvdtrec")
                        .HasColumnType("date");

                    b.Property<string>("Cventrega")
                        .HasColumnName("cventrega")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Cvfilial")
                        .HasColumnName("cvfilial")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Cvnota")
                        .HasColumnName("cvnota")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Cvobsv")
                        .HasColumnName("cvobsv")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Cvpsuso")
                        .HasColumnName("cvpsuso")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Cvreceita")
                        .HasColumnName("cvreceita")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Cvtick")
                        .HasColumnName("cvtick")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Cvtitular")
                        .HasColumnName("cvtitular")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Cvvalocrz")
                        .HasColumnName("cvvalocrz")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Cvvalourv")
                        .HasColumnName("cvvalourv")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Fucdem")
                        .HasColumnName("fucdem")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Fucodi")
                        .HasColumnName("fucodi")
                        .HasColumnType("character varying(18)")
                        .HasMaxLength(18);

                    b.ToTable("newconv","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Newfunc", b =>
                {
                    b.Property<string>("Codgolden")
                        .HasColumnName("codgolden")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Datademi")
                        .HasColumnName("datademi")
                        .HasColumnType("date");

                    b.Property<string>("Demitido")
                        .HasColumnName("demitido")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Fubai")
                        .HasColumnName("fubai")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Fubloq")
                        .HasColumnName("fubloq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Fucdem")
                        .HasColumnName("fucdem")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Fucep")
                        .HasColumnName("fucep")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Fucid")
                        .HasColumnName("fucid")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Fucodi")
                        .HasColumnName("fucodi")
                        .HasColumnType("character varying(18)")
                        .HasMaxLength(18);

                    b.Property<DateTime?>("Fudata")
                        .HasColumnName("fudata")
                        .HasColumnType("date");

                    b.Property<string>("Fudepto")
                        .HasColumnName("fudepto")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Fuend")
                        .HasColumnName("fuend")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Fuest")
                        .HasColumnName("fuest")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Fufone")
                        .HasColumnName("fufone")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<decimal?>("Fulimite")
                        .HasColumnName("fulimite")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Funome")
                        .HasColumnName("funome")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Fuobs1")
                        .HasColumnName("fuobs1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fuobs2")
                        .HasColumnName("fuobs2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fuobs3")
                        .HasColumnName("fuobs3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fusit")
                        .HasColumnName("fusit")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Impresso")
                        .HasColumnName("impresso")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Totdebcr")
                        .HasColumnName("totdebcr")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Totdebsr")
                        .HasColumnName("totdebsr")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("newfunc","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Newprec", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Prcddt")
                        .HasColumnName("prcddt")
                        .HasColumnType("date");

                    b.Property<decimal?>("Prcdlucr")
                        .HasColumnName("prcdlucr")
                        .HasColumnType("numeric(10,6)");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prcons")
                        .HasColumnName("prcons")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Prconscv")
                        .HasColumnName("prconscv")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Prfabr")
                        .HasColumnName("prfabr")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("newprec","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Newprod", b =>
                {
                    b.Property<string>("Coddcb")
                        .HasColumnName("coddcb")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Codesta")
                        .HasColumnName("codesta")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Codfis")
                        .HasColumnName("codfis")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Comissao")
                        .HasColumnName("comissao")
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DescMax")
                        .HasColumnName("desc_max")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("EstMinimo")
                        .HasColumnName("est_minimo")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Etbarra")
                        .HasColumnName("etbarra")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Etgraf")
                        .HasColumnName("etgraf")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prbarra")
                        .HasColumnName("prbarra")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<DateTime?>("Prcddt")
                        .HasColumnName("prcddt")
                        .HasColumnType("date");

                    b.Property<string>("Prcdimp")
                        .HasColumnName("prcdimp")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Prcdimp2")
                        .HasColumnName("prcdimp2")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Prcdla")
                        .HasColumnName("prcdla")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<decimal?>("Prcdlucr")
                        .HasColumnName("prcdlucr")
                        .HasColumnType("numeric(10,6)");

                    b.Property<string>("Prcdse")
                        .HasColumnName("prcdse")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Prclas")
                        .HasColumnName("prclas")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prcons")
                        .HasColumnName("prcons")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Prconscv")
                        .HasColumnName("prconscv")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("Prdata")
                        .HasColumnName("prdata")
                        .HasColumnType("date");

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Prdesconv")
                        .HasColumnName("prdesconv")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("Prdtul")
                        .HasColumnName("prdtul")
                        .HasColumnType("date");

                    b.Property<decimal?>("Premb")
                        .HasColumnName("premb")
                        .HasColumnType("numeric(4,0)");

                    b.Property<decimal?>("Prentr")
                        .HasColumnName("prentr")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Prestq")
                        .HasColumnName("prestq")
                        .HasColumnType("numeric(4,0)");

                    b.Property<string>("Pretiq")
                        .HasColumnName("pretiq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Prfabr")
                        .HasColumnName("prfabr")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Pricms")
                        .HasColumnName("pricms")
                        .HasColumnType("numeric(2,0)");

                    b.Property<string>("Prloca")
                        .HasColumnName("prloca")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<decimal?>("Prmesant")
                        .HasColumnName("prmesant")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Prneutro")
                        .HasColumnName("prneutro")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Prnola")
                        .HasColumnName("prnola")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Prnose")
                        .HasColumnName("prnose")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Prpis")
                        .HasColumnName("prpis")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prpopular")
                        .HasColumnName("prpopular")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prporta")
                        .HasColumnName("prporta")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prpos")
                        .HasColumnName("prpos")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Prpret")
                        .HasColumnName("prpret")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prreg")
                        .HasColumnName("prreg")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Prsal")
                        .HasColumnName("prsal")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Prsitu")
                        .HasColumnName("prsitu")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Prtestq")
                        .HasColumnName("prtestq")
                        .HasColumnType("numeric(4,0)");

                    b.Property<decimal?>("Prulte")
                        .HasColumnName("prulte")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Secao")
                        .HasColumnName("secao")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("UlVen")
                        .HasColumnName("ul_ven")
                        .HasColumnType("date");

                    b.Property<string>("Ultfor")
                        .HasColumnName("ultfor")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("Ultped")
                        .HasColumnName("ultped")
                        .HasColumnType("date");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Vendant")
                        .HasColumnName("vendant")
                        .HasColumnType("numeric(4,0)");

                    b.Property<decimal?>("Vendatu")
                        .HasColumnName("vendatu")
                        .HasColumnType("numeric(4,0)");

                    b.ToTable("newprod","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Newtab", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mesano")
                        .HasColumnName("mesano")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Newtab1")
                        .HasColumnName("newtab")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("newtab","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Nfe", b =>
                {
                    b.Property<string>("Campo")
                        .HasColumnName("campo")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasColumnType("character varying(35)")
                        .HasMaxLength(35);

                    b.Property<string>("Icms")
                        .HasColumnName("icms")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Imp")
                        .HasColumnName("imp")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ncm")
                        .HasColumnName("ncm")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Prcdimp")
                        .HasColumnName("prcdimp")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Qtde")
                        .HasColumnName("qtde")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<string>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Vltot")
                        .HasColumnName("vltot")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.ToTable("nfe","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Nota", b =>
                {
                    b.Property<decimal?>("Base")
                        .HasColumnName("base")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Basesub")
                        .HasColumnName("basesub")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Cliente")
                        .HasColumnName("cliente")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Icms")
                        .HasColumnName("icms")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Icmssub")
                        .HasColumnName("icmssub")
                        .HasColumnType("numeric(12,2)");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NFiscal")
                        .HasColumnName("n_fiscal")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("NNatu")
                        .HasColumnName("n_natu")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Natureza")
                        .HasColumnName("natureza")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<decimal?>("Nbase12")
                        .HasColumnName("nbase12")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Nbase18")
                        .HasColumnName("nbase18")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Nbase25")
                        .HasColumnName("nbase25")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Nbase7")
                        .HasColumnName("nbase7")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Ncancelada")
                        .HasColumnName("ncancelada")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("Ndata")
                        .HasColumnName("ndata")
                        .HasColumnType("date");

                    b.Property<decimal?>("Nicms12")
                        .HasColumnName("nicms12")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Nicms18")
                        .HasColumnName("nicms18")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Nicms25")
                        .HasColumnName("nicms25")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Nicms7")
                        .HasColumnName("nicms7")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Nvalor")
                        .HasColumnName("nvalor")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("nota","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Notaf", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NumNota")
                        .HasColumnName("num_nota")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("notaf","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Nped", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Numped")
                        .HasColumnName("numped")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("nped","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.NumTmp", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Numero")
                        .HasColumnName("numero")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("num_tmp","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Numped", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Desconto")
                        .HasColumnName("desconto")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Fornec")
                        .HasColumnName("fornec")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Numero")
                        .HasColumnName("numero")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Przentrega")
                        .HasColumnName("przentrega")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Przpagto")
                        .HasColumnName("przpagto")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("numped","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Ped0204", b =>
                {
                    b.Property<string>("Codint")
                        .HasColumnName("codint")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Eloja1")
                        .HasColumnName("eloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja2")
                        .HasColumnName("eloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja3")
                        .HasColumnName("eloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja4")
                        .HasColumnName("eloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Forn")
                        .HasColumnName("forn")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Mloja1")
                        .HasColumnName("mloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja2")
                        .HasColumnName("mloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja3")
                        .HasColumnName("mloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja4")
                        .HasColumnName("mloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja1")
                        .HasColumnName("nloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja2")
                        .HasColumnName("nloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja3")
                        .HasColumnName("nloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja4")
                        .HasColumnName("nloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Prbarra")
                        .HasColumnName("prbarra")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(10,2)");

                    b.ToTable("ped0204","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Ped0301", b =>
                {
                    b.Property<string>("Codint")
                        .HasColumnName("codint")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Eloja1")
                        .HasColumnName("eloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja2")
                        .HasColumnName("eloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja3")
                        .HasColumnName("eloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja4")
                        .HasColumnName("eloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Forn")
                        .HasColumnName("forn")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Mloja1")
                        .HasColumnName("mloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja2")
                        .HasColumnName("mloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja3")
                        .HasColumnName("mloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja4")
                        .HasColumnName("mloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja1")
                        .HasColumnName("nloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja2")
                        .HasColumnName("nloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja3")
                        .HasColumnName("nloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja4")
                        .HasColumnName("nloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Prbarra")
                        .HasColumnName("prbarra")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(10,2)");

                    b.ToTable("ped0301","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Ped0406", b =>
                {
                    b.Property<string>("Codint")
                        .HasColumnName("codint")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Eloja1")
                        .HasColumnName("eloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja2")
                        .HasColumnName("eloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja3")
                        .HasColumnName("eloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja4")
                        .HasColumnName("eloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Forn")
                        .HasColumnName("forn")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Mloja1")
                        .HasColumnName("mloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja2")
                        .HasColumnName("mloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja3")
                        .HasColumnName("mloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja4")
                        .HasColumnName("mloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja1")
                        .HasColumnName("nloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja2")
                        .HasColumnName("nloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja3")
                        .HasColumnName("nloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja4")
                        .HasColumnName("nloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Prbarra")
                        .HasColumnName("prbarra")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(10,2)");

                    b.ToTable("ped0406","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Ped1103", b =>
                {
                    b.Property<string>("Codint")
                        .HasColumnName("codint")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Eloja1")
                        .HasColumnName("eloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja2")
                        .HasColumnName("eloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja3")
                        .HasColumnName("eloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja4")
                        .HasColumnName("eloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Forn")
                        .HasColumnName("forn")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Mloja1")
                        .HasColumnName("mloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja2")
                        .HasColumnName("mloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja3")
                        .HasColumnName("mloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja4")
                        .HasColumnName("mloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja1")
                        .HasColumnName("nloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja2")
                        .HasColumnName("nloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja3")
                        .HasColumnName("nloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja4")
                        .HasColumnName("nloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Prbarra")
                        .HasColumnName("prbarra")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(10,2)");

                    b.ToTable("ped1103","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Ped1406", b =>
                {
                    b.Property<string>("Codint")
                        .HasColumnName("codint")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Eloja1")
                        .HasColumnName("eloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja2")
                        .HasColumnName("eloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja3")
                        .HasColumnName("eloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja4")
                        .HasColumnName("eloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Forn")
                        .HasColumnName("forn")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Mloja1")
                        .HasColumnName("mloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja2")
                        .HasColumnName("mloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja3")
                        .HasColumnName("mloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja4")
                        .HasColumnName("mloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja1")
                        .HasColumnName("nloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja2")
                        .HasColumnName("nloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja3")
                        .HasColumnName("nloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja4")
                        .HasColumnName("nloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Prbarra")
                        .HasColumnName("prbarra")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(10,2)");

                    b.ToTable("ped1406","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Ped1912", b =>
                {
                    b.Property<string>("Codint")
                        .HasColumnName("codint")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Eloja1")
                        .HasColumnName("eloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja2")
                        .HasColumnName("eloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja3")
                        .HasColumnName("eloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Eloja4")
                        .HasColumnName("eloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Forn")
                        .HasColumnName("forn")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Mloja1")
                        .HasColumnName("mloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja2")
                        .HasColumnName("mloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja3")
                        .HasColumnName("mloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Mloja4")
                        .HasColumnName("mloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja1")
                        .HasColumnName("nloja1")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja2")
                        .HasColumnName("nloja2")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja3")
                        .HasColumnName("nloja3")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Nloja4")
                        .HasColumnName("nloja4")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Prbarra")
                        .HasColumnName("prbarra")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(10,2)");

                    b.ToTable("ped1912","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Pedidos", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcdla")
                        .HasColumnName("prcdla")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<DateTime?>("Prdata")
                        .HasColumnName("prdata")
                        .HasColumnType("date");

                    b.Property<decimal?>("Prfabr")
                        .HasColumnName("prfabr")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("pedidos","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Prodextr", b =>
                {
                    b.Property<decimal?>("Concor1")
                        .HasColumnName("concor1")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Concor2")
                        .HasColumnName("concor2")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Concor3")
                        .HasColumnName("concor3")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Concor4")
                        .HasColumnName("concor4")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prcons")
                        .HasColumnName("prcons")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("prodextr","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Prodneg", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<DateTime?>("Prdata")
                        .HasColumnName("prdata")
                        .HasColumnType("date");

                    b.Property<decimal?>("Prestq")
                        .HasColumnName("prestq")
                        .HasColumnType("numeric(4,0)");

                    b.Property<string>("Prhora")
                        .HasColumnName("prhora")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(4,0)");

                    b.Property<string>("Prtipo")
                        .HasColumnName("prtipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.ToTable("prodneg","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Produto", b =>
                {
                    b.Property<string>("Coddcb")
                        .HasColumnName("coddcb")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Codesta")
                        .HasColumnName("codesta")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Codfis")
                        .HasColumnName("codfis")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Comissao")
                        .HasColumnName("comissao")
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DescMax")
                        .HasColumnName("desc_max")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("EstMinimo")
                        .HasColumnName("est_minimo")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Etbarra")
                        .HasColumnName("etbarra")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Etgraf")
                        .HasColumnName("etgraf")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prbarra")
                        .HasColumnName("prbarra")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<DateTime?>("Prcddt")
                        .HasColumnName("prcddt")
                        .HasColumnType("date");

                    b.Property<string>("Prcdimp")
                        .HasColumnName("prcdimp")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Prcdimp2")
                        .HasColumnName("prcdimp2")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Prcdla")
                        .HasColumnName("prcdla")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<decimal?>("Prcdlucr")
                        .HasColumnName("prcdlucr")
                        .HasColumnType("numeric(10,6)");

                    b.Property<string>("Prcdse")
                        .HasColumnName("prcdse")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Prclas")
                        .HasColumnName("prclas")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prcons")
                        .HasColumnName("prcons")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Prconscv")
                        .HasColumnName("prconscv")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("Prdata")
                        .HasColumnName("prdata")
                        .HasColumnType("date");

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Prdesconv")
                        .HasColumnName("prdesconv")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("Prdtul")
                        .HasColumnName("prdtul")
                        .HasColumnType("date");

                    b.Property<decimal?>("Premb")
                        .HasColumnName("premb")
                        .HasColumnType("numeric(4,0)");

                    b.Property<decimal?>("Prentr")
                        .HasColumnName("prentr")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Prestq")
                        .HasColumnName("prestq")
                        .HasColumnType("numeric(4,0)");

                    b.Property<string>("Pretiq")
                        .HasColumnName("pretiq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Prfabr")
                        .HasColumnName("prfabr")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Prfinal")
                        .HasColumnName("prfinal")
                        .HasColumnType("numeric(4,0)");

                    b.Property<string>("Prfixa")
                        .HasColumnName("prfixa")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Pricms")
                        .HasColumnName("pricms")
                        .HasColumnType("numeric(2,0)");

                    b.Property<decimal?>("Prinicial")
                        .HasColumnName("prinicial")
                        .HasColumnType("numeric(4,0)");

                    b.Property<string>("Prloca")
                        .HasColumnName("prloca")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Prlote")
                        .HasColumnName("prlote")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Prmesant")
                        .HasColumnName("prmesant")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Prncms")
                        .HasColumnName("prncms")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Prneutro")
                        .HasColumnName("prneutro")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Prnola")
                        .HasColumnName("prnola")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Prnose")
                        .HasColumnName("prnose")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Prpis")
                        .HasColumnName("prpis")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prpopular")
                        .HasColumnName("prpopular")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prporta")
                        .HasColumnName("prporta")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prpos")
                        .HasColumnName("prpos")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Prpret")
                        .HasColumnName("prpret")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prprinci")
                        .HasColumnName("prprinci")
                        .HasColumnType("character varying(130)")
                        .HasMaxLength(130);

                    b.Property<decimal?>("Prpromo")
                        .HasColumnName("prpromo")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Prreg")
                        .HasColumnName("prreg")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Prsal")
                        .HasColumnName("prsal")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Prsitu")
                        .HasColumnName("prsitu")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Prtestq")
                        .HasColumnName("prtestq")
                        .HasColumnType("numeric(4,0)");

                    b.Property<decimal?>("Prulte")
                        .HasColumnName("prulte")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Prun")
                        .HasColumnName("prun")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("Prvalid")
                        .HasColumnName("prvalid")
                        .HasColumnType("date");

                    b.Property<string>("Secao")
                        .HasColumnName("secao")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("UlVen")
                        .HasColumnName("ul_ven")
                        .HasColumnType("date");

                    b.Property<string>("Ultfor")
                        .HasColumnName("ultfor")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("Ultped")
                        .HasColumnName("ultped")
                        .HasColumnType("date");

                    b.Property<decimal?>("Ultpreco")
                        .HasColumnName("ultpreco")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Vendant")
                        .HasColumnName("vendant")
                        .HasColumnType("numeric(4,0)");

                    b.Property<decimal?>("Vendatu")
                        .HasColumnName("vendatu")
                        .HasColumnType("numeric(4,0)");

                    b.Property<decimal?>("Vlcomis")
                        .HasColumnName("vlcomis")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("produto","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Produtoold", b =>
                {
                    b.Property<string>("Coddcb")
                        .HasColumnName("coddcb")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Codesta")
                        .HasColumnName("codesta")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Codfis")
                        .HasColumnName("codfis")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Comissao")
                        .HasColumnName("comissao")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("DescMax")
                        .HasColumnName("desc_max")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("EstMinimo")
                        .HasColumnName("est_minimo")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Etbarra")
                        .HasColumnName("etbarra")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Etgraf")
                        .HasColumnName("etgraf")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prbarra")
                        .HasColumnName("prbarra")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<DateTime?>("Prcddt")
                        .HasColumnName("prcddt")
                        .HasColumnType("date");

                    b.Property<string>("Prcdimp")
                        .HasColumnName("prcdimp")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Prcdimp2")
                        .HasColumnName("prcdimp2")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Prcdla")
                        .HasColumnName("prcdla")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<decimal?>("Prcdlucr")
                        .HasColumnName("prcdlucr")
                        .HasColumnType("numeric(10,6)");

                    b.Property<string>("Prcdse")
                        .HasColumnName("prcdse")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Prclas")
                        .HasColumnName("prclas")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prcons")
                        .HasColumnName("prcons")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Prconscv")
                        .HasColumnName("prconscv")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("Prdata")
                        .HasColumnName("prdata")
                        .HasColumnType("date");

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Prdesconv")
                        .HasColumnName("prdesconv")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("Prdtul")
                        .HasColumnName("prdtul")
                        .HasColumnType("date");

                    b.Property<decimal?>("Premb")
                        .HasColumnName("premb")
                        .HasColumnType("numeric(4,0)");

                    b.Property<decimal?>("Prentr")
                        .HasColumnName("prentr")
                        .HasColumnType("numeric(6,0)");

                    b.Property<decimal?>("Prestq")
                        .HasColumnName("prestq")
                        .HasColumnType("numeric(4,0)");

                    b.Property<string>("Pretiq")
                        .HasColumnName("pretiq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Prfabr")
                        .HasColumnName("prfabr")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Prfixa")
                        .HasColumnName("prfixa")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Pricms")
                        .HasColumnName("pricms")
                        .HasColumnType("numeric(2,0)");

                    b.Property<decimal?>("Prinicial")
                        .HasColumnName("prinicial")
                        .HasColumnType("numeric(4,0)");

                    b.Property<string>("Prloca")
                        .HasColumnName("prloca")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Prlote")
                        .HasColumnName("prlote")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Prmesant")
                        .HasColumnName("prmesant")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Prncms")
                        .HasColumnName("prncms")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Prneutro")
                        .HasColumnName("prneutro")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Prnola")
                        .HasColumnName("prnola")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Prnose")
                        .HasColumnName("prnose")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Prpis")
                        .HasColumnName("prpis")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prpopular")
                        .HasColumnName("prpopular")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prporta")
                        .HasColumnName("prporta")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prpos")
                        .HasColumnName("prpos")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Prpret")
                        .HasColumnName("prpret")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prprinci")
                        .HasColumnName("prprinci")
                        .HasColumnType("character varying(130)")
                        .HasMaxLength(130);

                    b.Property<decimal?>("Prpromo")
                        .HasColumnName("prpromo")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Prreg")
                        .HasColumnName("prreg")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Prsal")
                        .HasColumnName("prsal")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Prsitu")
                        .HasColumnName("prsitu")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Prtestq")
                        .HasColumnName("prtestq")
                        .HasColumnType("numeric(4,0)");

                    b.Property<decimal?>("Prulte")
                        .HasColumnName("prulte")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Prun")
                        .HasColumnName("prun")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("Prvalid")
                        .HasColumnName("prvalid")
                        .HasColumnType("date");

                    b.Property<string>("Secao")
                        .HasColumnName("secao")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("UlVen")
                        .HasColumnName("ul_ven")
                        .HasColumnType("date");

                    b.Property<string>("Ultfor")
                        .HasColumnName("ultfor")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("Ultped")
                        .HasColumnName("ultped")
                        .HasColumnType("date");

                    b.Property<decimal?>("Ultpreco")
                        .HasColumnName("ultpreco")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Vendant")
                        .HasColumnName("vendant")
                        .HasColumnType("numeric(4,0)");

                    b.Property<decimal?>("Vendatu")
                        .HasColumnName("vendatu")
                        .HasColumnType("numeric(4,0)");

                    b.Property<decimal?>("Vlcomis")
                        .HasColumnName("vlcomis")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("produtoold","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Psico", b =>
                {
                    b.Property<string>("Barras")
                        .HasColumnName("barras")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Cid")
                        .HasColumnName("cid")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Cnpj")
                        .HasColumnName("cnpj")
                        .HasColumnType("character varying(14)")
                        .HasMaxLength(14);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Crm")
                        .HasColumnName("crm")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Emissao")
                        .HasColumnName("emissao")
                        .HasColumnType("date");

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Fornec")
                        .HasColumnName("fornec")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Idade")
                        .HasColumnName("idade")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lote")
                        .HasColumnName("lote")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Motivo")
                        .HasColumnName("motivo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("Nasc")
                        .HasColumnName("nasc")
                        .HasColumnType("date");

                    b.Property<string>("Nf")
                        .HasColumnName("nf")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nomemed")
                        .HasColumnName("nomemed")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Orgao")
                        .HasColumnName("orgao")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Paciente")
                        .HasColumnName("paciente")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Porta")
                        .HasColumnName("porta")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Prdesc")
                        .HasColumnName("prdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Prolong")
                        .HasColumnName("prolong")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prreg")
                        .HasColumnName("prreg")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<decimal?>("Qtde")
                        .HasColumnName("qtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Receita")
                        .HasColumnName("receita")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Rg")
                        .HasColumnName("rg")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Sexo")
                        .HasColumnName("sexo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Ticket")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Tpcons")
                        .HasColumnName("tpcons")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Tpidade")
                        .HasColumnName("tpidade")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Tpmed")
                        .HasColumnName("tpmed")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Tpreceita")
                        .HasColumnName("tpreceita")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Uf")
                        .HasColumnName("uf")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Ufcons")
                        .HasColumnName("ufcons")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Unidade")
                        .HasColumnName("unidade")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<string>("Usomed")
                        .HasColumnName("usomed")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.ToTable("psico","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Rancliqt", b =>
                {
                    b.Property<string>("Bacodi")
                        .HasColumnName("bacodi")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Cancelado")
                        .HasColumnName("cancelado")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Codcli")
                        .HasColumnName("codcli")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Ticket")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("TotComis")
                        .HasColumnName("tot_comis")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("TotDescon")
                        .HasColumnName("tot_descon")
                        .HasColumnType("numeric(2,0)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("VlTot")
                        .HasColumnName("vl_tot")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("VlUnit")
                        .HasColumnName("vl_unit")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("rancliqt","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Ranclivl", b =>
                {
                    b.Property<string>("Bacodi")
                        .HasColumnName("bacodi")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Caixa")
                        .HasColumnName("caixa")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Cancelado")
                        .HasColumnName("cancelado")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Codcli")
                        .HasColumnName("codcli")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<string>("Hora")
                        .HasColumnName("hora")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NFiscal")
                        .HasColumnName("n_fiscal")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Ticket")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("TotVen")
                        .HasColumnName("tot_ven")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("ranclivl","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Reconst", b =>
                {
                    b.Property<string>("Arquivo")
                        .HasColumnName("arquivo")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Necessita")
                        .HasColumnName("necessita")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Posicao")
                        .HasColumnName("posicao")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("reconst","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Reducao", b =>
                {
                    b.Property<string>("Acresc")
                        .HasColumnName("acresc")
                        .HasColumnType("character varying(14)")
                        .HasMaxLength(14);

                    b.Property<string>("Acresfin")
                        .HasColumnName("acresfin")
                        .HasColumnType("character varying(14)")
                        .HasMaxLength(14);

                    b.Property<string>("Aliquota")
                        .HasColumnName("aliquota")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Cancela")
                        .HasColumnName("cancela")
                        .HasColumnType("character varying(14)")
                        .HasMaxLength(14);

                    b.Property<string>("Cns")
                        .HasColumnName("cns")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Cnsi")
                        .HasColumnName("cnsi")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Coo")
                        .HasColumnName("coo")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .HasColumnName("data")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Desconto")
                        .HasColumnName("desconto")
                        .HasColumnType("character varying(14)")
                        .HasMaxLength(14);

                    b.Property<string>("Gtda")
                        .HasColumnName("gtda")
                        .HasColumnType("character varying(18)")
                        .HasMaxLength(18);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nsi")
                        .HasColumnName("nsi")
                        .HasColumnType("character varying(126)")
                        .HasMaxLength(126);

                    b.Property<string>("Rzaut")
                        .HasColumnName("rzaut")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Sangria")
                        .HasColumnName("sangria")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Supri")
                        .HasColumnName("supri")
                        .HasColumnType("character varying(14)")
                        .HasMaxLength(14);

                    b.Property<string>("Tributo")
                        .HasColumnName("tributo")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("reducao","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Relator", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nivel")
                        .HasColumnName("nivel")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Relatorio")
                        .HasColumnName("relatorio")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("relator","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.ResAno", b =>
                {
                    b.Property<decimal?>("CliAtds")
                        .HasColumnName("cli_atds")
                        .HasColumnType("numeric(6,0)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Descrec")
                        .HasColumnName("descrec")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Diastrab")
                        .HasColumnName("diastrab")
                        .HasColumnType("numeric(2,0)");

                    b.Property<decimal?>("Entradas")
                        .HasColumnName("entradas")
                        .HasColumnType("numeric(12,2)");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MesRef")
                        .HasColumnName("mes_ref")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<decimal?>("RecFiado")
                        .HasColumnName("rec_fiado")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("TotEstoq")
                        .HasColumnName("tot_estoq")
                        .HasColumnType("numeric(15,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("VdaConv")
                        .HasColumnName("vda_conv")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("VdaVista")
                        .HasColumnName("vda_vista")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("VenFiado")
                        .HasColumnName("ven_fiado")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("VenMes")
                        .HasColumnName("ven_mes")
                        .HasColumnType("numeric(15,2)");

                    b.ToTable("res_ano","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Retirada", b =>
                {
                    b.Property<string>("Caixa")
                        .HasColumnName("caixa")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<string>("Hora")
                        .HasColumnName("hora")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valorch")
                        .HasColumnName("valorch")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Valordh")
                        .HasColumnName("valordh")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("retirada","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Sal", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Salcod")
                        .HasColumnName("salcod")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Salnome")
                        .HasColumnName("salnome")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("sal","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Secao", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Secodi")
                        .HasColumnName("secodi")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Senome")
                        .HasColumnName("senome")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("secao","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Senha", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Sen")
                        .HasColumnName("sen")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Sencheq")
                        .HasColumnName("sencheq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Sencit")
                        .HasColumnName("sencit")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Senclich")
                        .HasColumnName("senclich")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Senclip")
                        .HasColumnName("senclip")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Sencont")
                        .HasColumnName("sencont")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("Sendate")
                        .HasColumnName("sendate")
                        .HasColumnType("date");

                    b.Property<string>("Sendefa")
                        .HasColumnName("sendefa")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Sendesc")
                        .HasColumnName("sendesc")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Sendesc1")
                        .HasColumnName("sendesc1")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Sendesc2")
                        .HasColumnName("sendesc2")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Sendesc3")
                        .HasColumnName("sendesc3")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Sendesc4")
                        .HasColumnName("sendesc4")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Sendesc5")
                        .HasColumnName("sendesc5")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Sendesc6")
                        .HasColumnName("sendesc6")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Sendia")
                        .HasColumnName("sendia")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("Senestq")
                        .HasColumnName("senestq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Senetq")
                        .HasColumnName("senetq")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Senetqb")
                        .HasColumnName("senetqb")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Senetqe")
                        .HasColumnName("senetqe")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Senetqp")
                        .HasColumnName("senetqp")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Senfia")
                        .HasColumnName("senfia")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Senfiacr")
                        .HasColumnName("senfiacr")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Senfiatr")
                        .HasColumnName("senfiatr")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("Senfis")
                        .HasColumnName("senfis")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Senlin")
                        .HasColumnName("senlin")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("Senman")
                        .HasColumnName("senman")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Senmdprint")
                        .HasColumnName("senmdprint")
                        .HasColumnType("numeric(2,0)");

                    b.Property<decimal?>("Senmulta")
                        .HasColumnName("senmulta")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Senniv")
                        .HasColumnName("senniv")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Senpar")
                        .HasColumnName("senpar")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("Senpcli")
                        .HasColumnName("senpcli")
                        .HasColumnType("date");

                    b.Property<decimal?>("Senpme")
                        .HasColumnName("senpme")
                        .HasColumnType("numeric(5,0)");

                    b.Property<decimal?>("Senponto")
                        .HasColumnName("senponto")
                        .HasColumnType("numeric(5,0)");

                    b.Property<string>("Senport")
                        .HasColumnName("senport")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Senprint")
                        .HasColumnName("senprint")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Senprot")
                        .HasColumnName("senprot")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Senrec")
                        .HasColumnName("senrec")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Senrel")
                        .HasColumnName("senrel")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Senrepete")
                        .HasColumnName("senrepete")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Senver")
                        .HasColumnName("senver")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<decimal?>("Senvlpon")
                        .HasColumnName("senvlpon")
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("senha","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Servico", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Svcodi")
                        .HasColumnName("svcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Svcomb")
                        .HasColumnName("svcomb")
                        .HasColumnType("numeric(2,0)");

                    b.Property<string>("Svdesc")
                        .HasColumnName("svdesc")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Svpr01")
                        .HasColumnName("svpr01")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Svpr02")
                        .HasColumnName("svpr02")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Svpr03")
                        .HasColumnName("svpr03")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Svpr04")
                        .HasColumnName("svpr04")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("Svpr05")
                        .HasColumnName("svpr05")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Svprec")
                        .HasColumnName("svprec")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Svven1")
                        .HasColumnName("svven1")
                        .HasColumnType("numeric(5,0)");

                    b.Property<decimal?>("Svven2")
                        .HasColumnName("svven2")
                        .HasColumnType("numeric(5,0)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("servico","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Sistema", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ticket")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<string>("Usuario")
                        .HasColumnName("usuario")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.ToTable("sistema","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Slpharma", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reconst")
                        .HasColumnName("reconst")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("slpharma","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Spool", b =>
                {
                    b.Property<string>("Arquivo")
                        .HasColumnName("arquivo")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<string>("Descr")
                        .HasColumnName("descr")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Hora")
                        .HasColumnName("hora")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Nivel")
                        .HasColumnName("nivel")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.ToTable("spool","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Subsecao", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Secaopert")
                        .HasColumnName("secaopert")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Subimpost")
                        .HasColumnName("subimpost")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Subncm")
                        .HasColumnName("subncm")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Subsecodi")
                        .HasColumnName("subsecodi")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Subselucr")
                        .HasColumnName("subselucr")
                        .HasColumnType("numeric(8,6)");

                    b.Property<string>("Subsenome")
                        .HasColumnName("subsenome")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Subseprec")
                        .HasColumnName("subseprec")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valrec")
                        .HasColumnName("valrec")
                        .HasColumnType("numeric(3,0)");

                    b.ToTable("subsecao","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Tabela", b =>
                {
                    b.Property<string>("Abc")
                        .HasColumnName("abc")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<decimal?>("Barra")
                        .HasColumnName("barra")
                        .HasColumnType("numeric(13,0)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ctr")
                        .HasColumnName("ctr")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Custom")
                        .HasColumnName("custom")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Des")
                        .HasColumnName("des")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<DateTime?>("Dtvig")
                        .HasColumnName("dtvig")
                        .HasColumnType("date");

                    b.Property<decimal?>("Fra1")
                        .HasColumnName("fra1")
                        .HasColumnType("numeric(12,2)");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Ipi")
                        .HasColumnName("ipi")
                        .HasColumnType("numeric(6,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LabNom")
                        .HasColumnName("lab_nom")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MedApr")
                        .HasColumnName("med_apr")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("MedDes")
                        .HasColumnName("med_des")
                        .HasColumnType("character varying(45)")
                        .HasMaxLength(45);

                    b.Property<string>("MedPrinci")
                        .HasColumnName("med_princi")
                        .HasColumnType("character varying(130)")
                        .HasMaxLength(130);

                    b.Property<string>("MedRegims")
                        .HasColumnName("med_regims")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Negpos")
                        .HasColumnName("negpos")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Neutro")
                        .HasColumnName("neutro")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Nom")
                        .HasColumnName("nom")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<decimal?>("Pco1")
                        .HasColumnName("pco1")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Pla1")
                        .HasColumnName("pla1")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Uni")
                        .HasColumnName("uni")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("tabela","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Temp", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Desconto")
                        .HasColumnName("desconto")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prcons")
                        .HasColumnName("prcons")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Prconsd")
                        .HasColumnName("prconsd")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Qtde")
                        .HasColumnName("qtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("temp","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Tempo", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Desconto")
                        .HasColumnName("desconto")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("Estoque")
                        .HasColumnName("estoque")
                        .HasColumnType("numeric(4,0)");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Pedido")
                        .HasColumnName("pedido")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prcons")
                        .HasColumnName("prcons")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Prconsd")
                        .HasColumnName("prconsd")
                        .HasColumnType("numeric(12,4)");

                    b.Property<decimal?>("Qtde")
                        .HasColumnName("qtde")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(12,2)");

                    b.ToTable("tempo","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Ticket", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ecf")
                        .HasColumnName("ecf")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ticket1")
                        .HasColumnName("ticket")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("ticket","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Transfer", b =>
                {
                    b.Property<string>("Balcon")
                        .HasColumnName("balcon")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Etiqueta")
                        .HasColumnName("etiqueta")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Filcodi")
                        .HasColumnName("filcodi")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Hora")
                        .HasColumnName("hora")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Impresso")
                        .HasColumnName("impresso")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prcons")
                        .HasColumnName("prcons")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("Qtde")
                        .HasColumnName("qtde")
                        .HasColumnType("numeric(4,0)");

                    b.Property<DateTime?>("Trdata")
                        .HasColumnName("trdata")
                        .HasColumnType("date");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("transfer","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco1", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco1","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco10", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco10","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco11", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco11","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco12", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco12","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco13", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco13","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco14", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco14","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco15", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco15","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco16", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco16","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco17", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco17","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco18", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco18","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco19", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco19","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco2", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco2","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco20", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco20","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco3", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco3","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco4", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco4","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco5", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco5","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco6", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco6","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco7", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco7","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco8", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco8","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Troco9", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Initroco")
                        .HasColumnName("initroco")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TrocoIni")
                        .HasColumnName("troco_ini")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("troco9","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Urv", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(7,2)");

                    b.ToTable("urv","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Usefarma", b =>
                {
                    b.Property<string>("Acesso1")
                        .HasColumnName("acesso1")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Acesso10")
                        .HasColumnName("acesso10")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Acesso2")
                        .HasColumnName("acesso2")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Acesso3")
                        .HasColumnName("acesso3")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Acesso4")
                        .HasColumnName("acesso4")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Acesso5")
                        .HasColumnName("acesso5")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Acesso6")
                        .HasColumnName("acesso6")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Acesso7")
                        .HasColumnName("acesso7")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Acesso8")
                        .HasColumnName("acesso8")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Acesso9")
                        .HasColumnName("acesso9")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nivel")
                        .HasColumnName("nivel")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Senha")
                        .HasColumnName("senha")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("usefarma","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.User", b =>
                {
                    b.Property<string>("Apelido")
                        .HasColumnName("apelido")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Cgc")
                        .HasColumnName("cgc")
                        .HasColumnType("character varying(18)")
                        .HasMaxLength(18);

                    b.Property<string>("Cidade")
                        .HasColumnName("cidade")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Comefia")
                        .HasColumnName("comefia")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<string>("Coment1")
                        .HasColumnName("coment1")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<string>("Coment2")
                        .HasColumnName("coment2")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<string>("Coment3")
                        .HasColumnName("coment3")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<string>("Coment4")
                        .HasColumnName("coment4")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<string>("Cpf")
                        .HasColumnName("cpf")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<string>("Disk1")
                        .HasColumnName("disk1")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<string>("Disk2")
                        .HasColumnName("disk2")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<string>("Disk3")
                        .HasColumnName("disk3")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<string>("Disk4")
                        .HasColumnName("disk4")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<string>("Disk5")
                        .HasColumnName("disk5")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<string>("Empresa")
                        .HasColumnName("empresa")
                        .HasColumnType("character varying(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasColumnType("character varying(49)")
                        .HasMaxLength(49);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Ibge")
                        .HasColumnName("ibge")
                        .HasColumnType("character varying(7)")
                        .HasMaxLength(7);

                    b.Property<decimal?>("Imposto")
                        .HasColumnName("imposto")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Inscrest")
                        .HasColumnName("inscrest")
                        .HasColumnType("character varying(18)")
                        .HasMaxLength(18);

                    b.Property<string>("Licenca")
                        .HasColumnName("licenca")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("Lote")
                        .HasColumnName("lote")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("ModNf")
                        .HasColumnName("mod_nf")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Nfe")
                        .HasColumnName("nfe")
                        .HasColumnType("numeric(6,0)");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Numero")
                        .HasColumnName("numero")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<decimal?>("Numseq")
                        .HasColumnName("numseq")
                        .HasColumnType("numeric(10,0)");

                    b.Property<decimal?>("Pop")
                        .HasColumnName("pop")
                        .HasColumnType("numeric(12,0)");

                    b.Property<string>("SerieNf")
                        .HasColumnName("serie_nf")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Telefone")
                        .HasColumnName("telefone")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.ToTable("user","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Usoint", b =>
                {
                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Qtde")
                        .HasColumnName("qtde")
                        .HasColumnType("numeric(4,0)");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.ToTable("usoint","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0100", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0100","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0101", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0101","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0102", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0102","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0103", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0103","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0104", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0104","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0105", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0105","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0106", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0106","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0107", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0107","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0108", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0108","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0109", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0109","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0110", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0110","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0111", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0111","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0112", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0112","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0113", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0113","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0114", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0114","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0115", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0115","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0116", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0116","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0117", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0117","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0118", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0118","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0119", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0119","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0120", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0120","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0171", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0171","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0194", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0194","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0197", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0197","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0199", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0199","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0200", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0200","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0201", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0201","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0202", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0202","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0203", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0203","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0204", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0204","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0205", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0205","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0206", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0206","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0207", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0207","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0208", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0208","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0209", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0209","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0210", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0210","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0211", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0211","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0212", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0212","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0213", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0213","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0214", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0214","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0215", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0215","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0216", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0216","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0217", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0217","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0218", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0218","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0219", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0219","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0220", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0220","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0271", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0271","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0300", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0300","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0301", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0301","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0302", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0302","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0303", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0303","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0304", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0304","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0305", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0305","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0306", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0306","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0307", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0307","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0308", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0308","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0309", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0309","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0310", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0310","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0311", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0311","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0312", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0312","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0313", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0313","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0314", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0314","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0315", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0315","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0316", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0316","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0317", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0317","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0318", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0318","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0319", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0319","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0394", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0394","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0400", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0400","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0401", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0401","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0402", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0402","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0403", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0403","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0404", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0404","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0405", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0405","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0406", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0406","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0407", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0407","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0408", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0408","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0409", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0409","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0410", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0410","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0411", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0411","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0412", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0412","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0413", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0413","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0414", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0414","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0415", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0415","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0416", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0416","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0417", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0417","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0418", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0418","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0419", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0419","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0494", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0494","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0500", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0500","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0501", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0501","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0502", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0502","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0503", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0503","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0504", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0504","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0505", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0505","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0506", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0506","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0507", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0507","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0508", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0508","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0509", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0509","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0510", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0510","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0511", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0511","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0512", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0512","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0513", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0513","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0514", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0514","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0515", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0515","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0516", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0516","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0517", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0517","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0518", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0518","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0519", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0519","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0594", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0594","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0600", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0600","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0601", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0601","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0602", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0602","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0603", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0603","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0604", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0604","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0605", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0605","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0606", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0606","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0607", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0607","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0608", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0608","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0609", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0609","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0610", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0610","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0611", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0611","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0612", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0612","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0613", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0613","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0614", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0614","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0615", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0615","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0616", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0616","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0617", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0617","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0618", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0618","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0619", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0619","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0694", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0694","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0700", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0700","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0701", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0701","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0702", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0702","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0703", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0703","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0704", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0704","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0705", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0705","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0706", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0706","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0707", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0707","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0708", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0708","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0709", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0709","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0710", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0710","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0711", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0711","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0712", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0712","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0713", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0713","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0714", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0714","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0715", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0715","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0716", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0716","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0717", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0717","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0718", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0718","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0719", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0719","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0720", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0720","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0794", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0794","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0800", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0800","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0801", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0801","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0802", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0802","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0803", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0803","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0804", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0804","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0805", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0805","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0806", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0806","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0807", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0807","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0808", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0808","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0809", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0809","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0810", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0810","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0811", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0811","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0812", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0812","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0813", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0813","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0814", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0814","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0815", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0815","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0816", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0816","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0817", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0817","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0818", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0818","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0819", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0819","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0894", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0894","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0900", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0900","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0901", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0901","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0902", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0902","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0903", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0903","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0904", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0904","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0905", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0905","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0906", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0906","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0907", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0907","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0908", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0908","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0909", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0909","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0910", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0910","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0911", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0911","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0912", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0912","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0913", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0913","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0914", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0914","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0915", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0915","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0916", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0916","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0917", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0917","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0918", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0918","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0919", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0919","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend0994", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend0994","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1000", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1000","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1001", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1001","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1002", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1002","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1003", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1003","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1004", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1004","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1005", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1005","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1006", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1006","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1007", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1007","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1008", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1008","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1009", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1009","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1010", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1010","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1011", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1011","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1012", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1012","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1013", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1013","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1014", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1014","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1015", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1015","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1016", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1016","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1017", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1017","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1018", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1018","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1019", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1019","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1100", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1100","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1101", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1101","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1102", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1102","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1103", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1103","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1104", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1104","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1105", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1105","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1106", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1106","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1107", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1107","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1108", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1108","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1109", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1109","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1110", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1110","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1111", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1111","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1112", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1112","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1113", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1113","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1114", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1114","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1115", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1115","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1116", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1116","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1117", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1117","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1118", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1118","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1119", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1119","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1170", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1170","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1200", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1200","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1201", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1201","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1202", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1202","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1203", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1203","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1204", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1204","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1205", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1205","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1206", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1206","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1207", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1207","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1208", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1208","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1209", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1209","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1210", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1210","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1211", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1211","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1212", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1212","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1213", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1213","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1214", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1214","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1215", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1215","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1216", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1216","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1217", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1217","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1218", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1218","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1219", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1219","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1270", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1270","public");
                });

            modelBuilder.Entity("Core.Entities.Legacy.Vend1293", b =>
                {
                    b.Property<string>("Prcodi")
                        .HasColumnName("prcodi")
                        .HasColumnType("character varying(6)")
                        .HasMaxLength(6);

                    b.Property<decimal?>("Prqtde")
                        .HasColumnName("prqtde")
                        .HasColumnType("numeric(6,0)");

                    b.ToTable("vend1293","public");
                });

            modelBuilder.Entity("Core.Entities.Stock.StockEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 17, DateTimeKind.Unspecified).AddTicks(7238), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<DateTime?>("DrugMaturityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 17, DateTimeKind.Unspecified).AddTicks(7771), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("LotCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NfEmissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NfNumber")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Totalcost")
                        .HasColumnType("numeric");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("StockEntry");
                });

            modelBuilder.Entity("Core.Entities.Stock.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Cnpj")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 18, DateTimeKind.Unspecified).AddTicks(5539), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 41, 18, DateTimeKind.Unspecified).AddTicks(6010), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Core.Entities.Sync.Syncronization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 40, 783, DateTimeKind.Unspecified).AddTicks(848), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastSyncronization")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 12, 4, 9, 40, 785, DateTimeKind.Unspecified).AddTicks(5173), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedFrom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Syncronization");
                });

            modelBuilder.Entity("Core.Entities.Catalog.Drug", b =>
                {
                    b.HasBaseType("Core.Entities.Catalog.Product");

                    b.Property<double?>("AbsoluteDosageInMg")
                        .HasColumnType("double precision");

                    b.Property<string>("ActivePrinciple")
                        .HasColumnType("text");

                    b.Property<int?>("BaseDrugId")
                        .HasColumnType("integer");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<string>("CommercialName")
                        .HasColumnType("text");

                    b.Property<string>("DigitalBuleLink")
                        .HasColumnType("text");

                    b.Property<string>("Dosage")
                        .HasColumnType("text");

                    b.Property<decimal?>("DrugCost")
                        .HasColumnType("numeric");

                    b.Property<string>("DrugName")
                        .HasColumnType("text");

                    b.Property<bool>("IsPriceFixed")
                        .HasColumnType("boolean");

                    b.Property<string>("LotNumber")
                        .HasColumnType("text");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<string>("ManufacturerName")
                        .HasColumnType("text");

                    b.Property<string>("PrCdse")
                        .HasColumnType("text");

                    b.Property<bool>("PrescriptionNeeded")
                        .HasColumnType("boolean");

                    b.Property<int?>("StockEntryId")
                        .HasColumnType("integer");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.HasIndex("StockEntryId");

                    b.HasDiscriminator().HasValue("Drug");
                });

            modelBuilder.Entity("Core.Entities.Client", b =>
                {
                    b.HasBaseType("Core.Entities.Financial.Beneficiary");

                    b.Property<string>("Cpf")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.HasIndex("AddressId");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Core.Entities.Stock.Manufacturer", b =>
                {
                    b.HasBaseType("Core.Entities.Financial.Beneficiary");

                    b.Property<string>("Cnpj")
                        .HasColumnType("text");

                    b.HasIndex("AddressId")
                        .HasName("IX_Beneficiaries_AddressId1");

                    b.HasDiscriminator().HasValue("Manufacturer");
                });

            modelBuilder.Entity("Core.Entities.Catalog.DrugInformation", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Drug", "Drug")
                        .WithMany("Druginformation")
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductPrice", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductShelfLife", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", null)
                        .WithMany("ShelfLifes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductStockEntry", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("Stockentries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Stock.StockEntry", "StockEntry")
                        .WithMany()
                        .HasForeignKey("StockEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductSupplier", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Stock.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Stock.StockEntry", b =>
                {
                    b.HasOne("Core.Entities.Stock.Supplier", "Supplier")
                        .WithMany("Stockentries")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Core.Entities.Stock.Supplier", b =>
                {
                    b.HasOne("Core.Entities.Address", "Address")
                        .WithMany("Suppliers")
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("Core.Entities.Catalog.Drug", b =>
                {
                    b.HasOne("Core.Entities.Stock.StockEntry", null)
                        .WithMany("Drugs")
                        .HasForeignKey("StockEntryId");
                });

            modelBuilder.Entity("Core.Entities.Client", b =>
                {
                    b.HasOne("Core.Entities.Address", "Address")
                        .WithMany("Clients")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Stock.Manufacturer", b =>
                {
                    b.HasOne("Core.Entities.Address", "Address")
                        .WithMany("Manufacturer")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Beneficiaries_Addresses_AddressId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
