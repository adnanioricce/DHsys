// <auto-generated />
using System;
using DAL.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DAL.Migrations
{
    [DbContext(typeof(DHsysContext))]
    partial class DHsysContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AddressState")
                        .HasColumnType("text");

                    b.Property<string>("Addressnumber")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 906, DateTimeKind.Unspecified).AddTicks(9265), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("FirstAddressLine")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 906, DateTimeKind.Unspecified).AddTicks(9687), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("SecondAddressLine")
                        .HasColumnType("text");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<string>("Zipcode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Core.Entities.Catalog.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 976, DateTimeKind.Unspecified).AddTicks(8059), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 976, DateTimeKind.Unspecified).AddTicks(8594), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("boolean");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Core.Entities.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<double?>("AbsoluteDosageInMg")
                        .HasColumnType("double precision");

                    b.Property<string>("ActivePrinciple")
                        .HasColumnType("text");

                    b.Property<string>("BarCode")
                        .HasColumnType("text");

                    b.Property<int?>("BaseProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<string>("CommercialName")
                        .HasColumnType("text");

                    b.Property<string>("Commission")
                        .HasColumnType("text");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 986, DateTimeKind.Unspecified).AddTicks(3477), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DigitalBuleLink")
                        .HasColumnType("text");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Dosage")
                        .HasColumnType("text");

                    b.Property<decimal>("EndCustomerPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ICMS")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPriceFixed")
                        .HasColumnType("boolean");

                    b.Property<string>("LaboratoryCode")
                        .HasColumnType("text");

                    b.Property<string>("LaboratoryName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastStockEntry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 986, DateTimeKind.Unspecified).AddTicks(3908), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("LotNumber")
                        .HasColumnType("text");

                    b.Property<string>("MainSupplierName")
                        .HasColumnType("text");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<string>("ManufacturerName")
                        .HasColumnType("text");

                    b.Property<decimal>("MaxDiscountPercentage")
                        .HasColumnType("numeric");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Ncm")
                        .HasColumnType("text");

                    b.Property<string>("PrCdse")
                        .HasColumnType("text");

                    b.Property<bool>("PrescriptionNeeded")
                        .HasColumnType("boolean");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<string>("RegistryCode")
                        .HasColumnType("text");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("integer");

                    b.Property<int>("ReorderQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("SavingPercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("Section")
                        .HasColumnType("text");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 978, DateTimeKind.Unspecified).AddTicks(6980), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 978, DateTimeKind.Unspecified).AddTicks(7751), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 987, DateTimeKind.Unspecified).AddTicks(5604), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 987, DateTimeKind.Unspecified).AddTicks(6300), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("MediaResourceId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MediaResourceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 988, DateTimeKind.Unspecified).AddTicks(5589), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<decimal>("EndCustomerDrugPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 988, DateTimeKind.Unspecified).AddTicks(6090), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<DateTimeOffset?>("Pricestartdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductShelfLife", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 989, DateTimeKind.Unspecified).AddTicks(1467), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 989, DateTimeKind.Unspecified).AddTicks(1949), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StockEntryId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductShelfLife");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductStockEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 989, DateTimeKind.Unspecified).AddTicks(7376), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 989, DateTimeKind.Unspecified).AddTicks(7983), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("LotCode")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProductMaturityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("StockEntryId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockEntryId");

                    b.ToTable("ProductStockEntry");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 990, DateTimeKind.Unspecified).AddTicks(7596), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 990, DateTimeKind.Unspecified).AddTicks(8210), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSupplier");
                });

            modelBuilder.Entity("Core.Entities.Financial.Beneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 975, DateTimeKind.Unspecified).AddTicks(7232), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 975, DateTimeKind.Unspecified).AddTicks(7854), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("beneficiaries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Beneficiary");
                });

            modelBuilder.Entity("Core.Entities.Financial.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("integer");

                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 903, DateTimeKind.Unspecified).AddTicks(4464), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 903, DateTimeKind.Unspecified).AddTicks(5004), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("PersonType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("Core.Entities.Financial.POSOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ConsumerCode")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 888, DateTimeKind.Unspecified).AddTicks(7553), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<decimal>("DiscountTotal")
                        .HasColumnType("numeric");

                    b.Property<bool>("HasDealWithStore")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 888, DateTimeKind.Unspecified).AddTicks(8204), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("POSOrder");
                });

            modelBuilder.Entity("Core.Entities.Financial.POSOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 893, DateTimeKind.Unspecified).AddTicks(523), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<decimal>("CustomerValue")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 893, DateTimeKind.Unspecified).AddTicks(1170), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("POSOrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("POSOrderId1")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductUniqueCode")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("POSOrderId");

                    b.HasIndex("POSOrderId1");

                    b.HasIndex("ProductId");

                    b.ToTable("POSOrderItem");
                });

            modelBuilder.Entity("Core.Entities.Media.MediaResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 893, DateTimeKind.Unspecified).AddTicks(5352), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 893, DateTimeKind.Unspecified).AddTicks(5870), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MediaResource");
                });

            modelBuilder.Entity("Core.Entities.Stock.StockChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 871, DateTimeKind.Unspecified).AddTicks(8925), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("ImpactingEntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 871, DateTimeKind.Unspecified).AddTicks(9475), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("StockChange");
                });

            modelBuilder.Entity("Core.Entities.Stock.StockEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 872, DateTimeKind.Unspecified).AddTicks(9770), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 873, DateTimeKind.Unspecified).AddTicks(731), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<DateTime?>("NfEmissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NfNumber")
                        .HasColumnType("text");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Totalcost")
                        .HasColumnType("numeric");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("StockEntry");
                });

            modelBuilder.Entity("Core.Entities.Stock.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Cnpj")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 879, DateTimeKind.Unspecified).AddTicks(9495), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 880, DateTimeKind.Unspecified).AddTicks(145), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Core.Entities.Sync.Syncronization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 622, DateTimeKind.Unspecified).AddTicks(2374), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastSyncronization")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 12, 24, 15, 28, 44, 633, DateTimeKind.Unspecified).AddTicks(5226), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("UniqueCode")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedFrom")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Syncronization");
                });

            modelBuilder.Entity("Core.Entities.Client", b =>
                {
                    b.HasBaseType("Core.Entities.Financial.Beneficiary");

                    b.Property<string>("Cpf")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.HasIndex("AddressId");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Core.Entities.Stock.Manufacturer", b =>
                {
                    b.HasBaseType("Core.Entities.Financial.Beneficiary");

                    b.Property<string>("Cnpj")
                        .HasColumnType("text");

                    b.HasIndex("AddressId");

                    b.HasDiscriminator().HasValue("Manufacturer");
                });

            modelBuilder.Entity("Core.Entities.Catalog.Category", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Category", "Parent")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductCategory", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductMedia", b =>
                {
                    b.HasOne("Core.Entities.Media.MediaResource", "Media")
                        .WithMany()
                        .HasForeignKey("MediaResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("ProductMedias")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductPrice", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductShelfLife", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("ShelfLifes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductStockEntry", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("Stockentries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Stock.StockEntry", "StockEntry")
                        .WithMany("Items")
                        .HasForeignKey("StockEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockEntry");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductSupplier", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Stock.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Entities.Financial.POSOrderItem", b =>
                {
                    b.HasOne("Core.Entities.Financial.POSOrder", null)
                        .WithMany("Items")
                        .HasForeignKey("POSOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Financial.POSOrder", "POSOrder")
                        .WithMany()
                        .HasForeignKey("POSOrderId1");

                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("POSOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.Stock.StockChange", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("StockChanges")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.Stock.StockEntry", b =>
                {
                    b.HasOne("Core.Entities.Stock.Supplier", null)
                        .WithMany("Stockentries")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Core.Entities.Stock.Supplier", b =>
                {
                    b.HasOne("Core.Entities.Address", "Address")
                        .WithMany("Suppliers")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Core.Entities.Client", b =>
                {
                    b.HasOne("Core.Entities.Address", "Address")
                        .WithMany("Clients")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Core.Entities.Stock.Manufacturer", b =>
                {
                    b.HasOne("Core.Entities.Address", "Address")
                        .WithMany("Manufacturer")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Core.Entities.Address", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Manufacturer");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Core.Entities.Catalog.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Core.Entities.Catalog.Product", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("ProductMedias");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductSuppliers");

                    b.Navigation("ShelfLifes");

                    b.Navigation("StockChanges");

                    b.Navigation("Stockentries");
                });

            modelBuilder.Entity("Core.Entities.Financial.POSOrder", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Core.Entities.Stock.StockEntry", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Core.Entities.Stock.Supplier", b =>
                {
                    b.Navigation("Stockentries");
                });
#pragma warning restore 612, 618
        }
    }
}
