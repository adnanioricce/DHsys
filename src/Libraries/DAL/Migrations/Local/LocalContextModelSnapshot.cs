// <auto-generated />
using System;
using DAL.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations.Local
{
    [DbContext(typeof(LocalContext))]
    partial class LocalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressState")
                        .HasColumnType("TEXT");

                    b.Property<string>("Addressnumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstAddressLine")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondAddressLine")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zipcode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Core.Entities.Catalog.DrugInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CounterIndication")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DrugId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HowToUse")
                        .HasColumnType("TEXT");

                    b.Property<string>("HowWorks")
                        .HasColumnType("TEXT");

                    b.Property<string>("Indication")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MinimalAgeOfUse")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfessionalBule")
                        .HasColumnType("TEXT");

                    b.Property<string>("Substances")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeOfUse")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserBule")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugInformation");
                });

            modelBuilder.Entity("Core.Entities.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commission")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("EndCustomerPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ICMS")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("MainSupplierName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxDiscountPercentage")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ncm")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProdutoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuantityInStock")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReorderQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SavingPercentage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Section")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EndCustomerDrugPrice")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("Pricestartdate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductShelfLife", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StockEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductShelfLife");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSupplier");
                });

            modelBuilder.Entity("Core.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cpf")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Core.Entities.Financial.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Billings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeneficiaryId = 0,
                            BeneficiaryName = "empresa",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EndDate = new DateTime(2020, 6, 4, 23, 44, 58, 125, DateTimeKind.Utc).AddTicks(9876),
                            IsDeleted = false,
                            IsPaid = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(2020, 6, 4, 23, 44, 58, 125, DateTimeKind.Unspecified).AddTicks(9258), new TimeSpan(0, 0, 0, 0, 0)),
                            PersonType = 0,
                            Price = 12.99m
                        },
                        new
                        {
                            Id = 2,
                            BeneficiaryId = 0,
                            BeneficiaryName = "empresa 2",
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EndDate = new DateTime(2020, 6, 4, 23, 44, 58, 126, DateTimeKind.Utc).AddTicks(1921),
                            IsDeleted = false,
                            IsPaid = false,
                            LastUpdatedOn = new DateTimeOffset(new DateTime(2020, 6, 4, 23, 44, 58, 126, DateTimeKind.Unspecified).AddTicks(1912), new TimeSpan(0, 0, 0, 0, 0)),
                            PersonType = 0,
                            Price = 22.99m
                        });
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Agenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bairro")
                        .HasColumnName("BAIRRO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cep")
                        .HasColumnName("CEP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cidade")
                        .HasColumnName("CIDADE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codigo")
                        .HasColumnName("CODIGO")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Endereco")
                        .HasColumnName("ENDERECO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fone")
                        .HasColumnName("FONE")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnName("NOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AGENDA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Balcon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bacodi")
                        .HasColumnName("BACODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Bacomi")
                        .HasColumnName("BACOMI")
                        .HasColumnType("REAL");

                    b.Property<double?>("Badevol")
                        .HasColumnName("BADEVOL")
                        .HasColumnType("REAL");

                    b.Property<string>("Banome")
                        .HasColumnName("BANOME")
                        .HasColumnType("TEXT");

                    b.Property<double?>("ComisAce")
                        .HasColumnName("COMIS_ACE")
                        .HasColumnType("REAL");

                    b.Property<double?>("ComisBo")
                        .HasColumnName("COMIS_BO")
                        .HasColumnType("REAL");

                    b.Property<double?>("ComisEti")
                        .HasColumnName("COMIS_ETI")
                        .HasColumnType("REAL");

                    b.Property<double?>("ComisOut")
                        .HasColumnName("COMIS_OUT")
                        .HasColumnType("REAL");

                    b.Property<double?>("ComisPer")
                        .HasColumnName("COMIS_PER")
                        .HasColumnType("REAL");

                    b.Property<double?>("ComisPerc")
                        .HasColumnName("COMIS_PERC")
                        .HasColumnType("REAL");

                    b.Property<double?>("ComisVar")
                        .HasColumnName("COMIS_VAR")
                        .HasColumnType("REAL");

                    b.Property<string>("Cpf")
                        .HasColumnName("CPF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .HasColumnName("SENHA")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BALCON");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Brindes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .HasColumnName("CODIGO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnName("NOME")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Pontos")
                        .HasColumnName("PONTOS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Qtde")
                        .HasColumnName("QTDE")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("BRINDES");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Cadlab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DtAlter")
                        .HasColumnName("DT_ALTER")
                        .HasColumnType("datetime");

                    b.Property<string>("Foapel")
                        .HasColumnName("FOAPEL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fobair")
                        .HasColumnName("FOBAIR")
                        .HasColumnType("TEXT");

                    b.Property<string>("Focepe")
                        .HasColumnName("FOCEPE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Focida")
                        .HasColumnName("FOCIDA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Focont")
                        .HasColumnName("FOCONT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Foende")
                        .HasColumnName("FOENDE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Foesta")
                        .HasColumnName("FOESTA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fofaxe")
                        .HasColumnName("FOFAXE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Foibge")
                        .HasColumnName("FOIBGE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonome")
                        .HasColumnName("FONOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fonume")
                        .HasColumnName("FONUME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fotel2")
                        .HasColumnName("FOTEL2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fotele")
                        .HasColumnName("FOTELE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Labrev")
                        .HasColumnName("LABREV")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lacgce")
                        .HasColumnName("LACGCE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lacodi")
                        .HasColumnName("LACODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lacond")
                        .HasColumnName("LACOND")
                        .HasColumnType("TEXT");

                    b.Property<string>("Laiest")
                        .HasColumnName("LAIEST")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Laperc")
                        .HasColumnName("LAPERC")
                        .HasColumnType("REAL");

                    b.Property<string>("Latipo")
                        .HasColumnName("LATIPO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Laulno")
                        .HasColumnName("LAULNO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Laultc")
                        .HasColumnName("LAULTC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nomarq")
                        .HasColumnName("NOMARQ")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CADLAB");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Cadprom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fonome")
                        .HasColumnName("FONOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fotele")
                        .HasColumnName("FOTELE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lacodi")
                        .HasColumnName("LACODI")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Valid")
                        .HasColumnName("VALID")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("CADPROM");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Caixa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CxAdm")
                        .HasColumnName("CX_ADM")
                        .HasColumnType("TEXT");

                    b.Property<string>("CxAtend")
                        .HasColumnName("CX_ATEND")
                        .HasColumnType("TEXT");

                    b.Property<double?>("CxCart")
                        .HasColumnName("CX_CART")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("CxData")
                        .HasColumnName("CX_DATA")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CxRec")
                        .HasColumnName("CX_REC")
                        .HasColumnType("datetime");

                    b.Property<string>("CxTipo")
                        .HasColumnName("CX_TIPO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("CxValor")
                        .HasColumnName("CX_VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("CAIXA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Cancdia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codemp")
                        .HasColumnName("CODEMP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codfun")
                        .HasColumnName("CODFUN")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datac")
                        .HasColumnName("DATAC")
                        .HasColumnType("datetime");

                    b.Property<string>("Filial")
                        .HasColumnName("FILIAL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ticket")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CANCDIA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Cartao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .HasColumnName("CODIGO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnName("NOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Parcel")
                        .HasColumnName("PARCEL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prazo")
                        .HasColumnName("PRAZO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Qtde")
                        .HasColumnName("QTDE")
                        .HasColumnType("REAL");

                    b.Property<double?>("Taxa")
                        .HasColumnName("TAXA")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("CARTAO");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Chdevol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Agencia")
                        .HasColumnName("AGENCIA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Banco")
                        .HasColumnName("BANCO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cheque")
                        .HasColumnName("CHEQUE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cliente")
                        .HasColumnName("CLIENTE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Conta")
                        .HasColumnName("CONTA")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datae")
                        .HasColumnName("DATAE")
                        .HasColumnType("datetime");

                    b.Property<double?>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("CHDEVOL");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Cheque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Agencia")
                        .HasColumnName("AGENCIA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Baixa")
                        .HasColumnName("BAIXA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Banco")
                        .HasColumnName("BANCO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cheque1")
                        .HasColumnName("CHEQUE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cliente")
                        .HasColumnName("CLIENTE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Conta")
                        .HasColumnName("CONTA")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datae")
                        .HasColumnName("DATAE")
                        .HasColumnType("datetime");

                    b.Property<string>("Filial")
                        .HasColumnName("FILIAL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Obs")
                        .HasColumnName("OBS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rg")
                        .HasColumnName("RG")
                        .HasColumnType("TEXT");

                    b.Property<string>("Situacao")
                        .HasColumnName("SITUACAO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .HasColumnName("TELEFONE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ticket")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Cheque");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.CliMed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CpfCrm")
                        .HasColumnName("CPF_CRM")
                        .HasColumnType("TEXT");

                    b.Property<string>("Endereco")
                        .HasColumnName("ENDERECO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fone")
                        .HasColumnName("FONE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnName("NOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sexo")
                        .HasColumnName("SEXO")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CliMed");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Clicheq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bairro")
                        .HasColumnName("BAIRRO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cep")
                        .HasColumnName("CEP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cidade")
                        .HasColumnName("CIDADE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codigo")
                        .HasColumnName("CODIGO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cpf")
                        .HasColumnName("CPF")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Datanasc")
                        .HasColumnName("DATANASC")
                        .HasColumnType("datetime");

                    b.Property<string>("Endereco")
                        .HasColumnName("ENDERECO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fone")
                        .HasColumnName("FONE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnName("NOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rg")
                        .HasColumnName("RG")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CLICHEQ");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Clbairro")
                        .HasColumnName("CLBAIRRO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clcep")
                        .HasColumnName("CLCEP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clcida")
                        .HasColumnName("CLCIDA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clcodi")
                        .HasColumnName("CLCODI")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Clcompra")
                        .HasColumnName("CLCOMPRA")
                        .HasColumnType("datetime");

                    b.Property<string>("Clcpf")
                        .HasColumnName("CLCPF")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Clcred")
                        .HasColumnName("CLCRED")
                        .HasColumnType("REAL");

                    b.Property<double?>("Cldebi")
                        .HasColumnName("CLDEBI")
                        .HasColumnType("REAL");

                    b.Property<string>("Cldesc")
                        .HasColumnName("CLDESC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Cldesmed")
                        .HasColumnName("CLDESMED")
                        .HasColumnType("REAL");

                    b.Property<double?>("Cldesper")
                        .HasColumnName("CLDESPER")
                        .HasColumnType("REAL");

                    b.Property<string>("Clende")
                        .HasColumnName("CLENDE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clestado")
                        .HasColumnName("CLESTADO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Cllime")
                        .HasColumnName("CLLIME")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Clnasc")
                        .HasColumnName("CLNASC")
                        .HasColumnType("datetime");

                    b.Property<string>("Clnome")
                        .HasColumnName("CLNOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clobs")
                        .HasColumnName("CLOBS")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Clpagto")
                        .HasColumnName("CLPAGTO")
                        .HasColumnType("REAL");

                    b.Property<string>("Clrg")
                        .HasColumnName("CLRG")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cltele")
                        .HasColumnName("CLTELE")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Clupagto")
                        .HasColumnName("CLUPAGTO")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("CLIENTE");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Clipago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cliente")
                        .HasColumnName("CLIENTE")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Credito")
                        .HasColumnName("CREDITO")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<double?>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("CLIPAGO");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Contas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cod")
                        .HasColumnName("COD")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hist")
                        .HasColumnName("HIST")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CONTAS");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Conv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cvbalc")
                        .HasColumnName("CVBALC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Cvcomissao")
                        .HasColumnName("CVCOMISSAO")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Cvdata")
                        .HasColumnName("CVDATA")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Cvdtrec")
                        .HasColumnName("CVDTREC")
                        .HasColumnType("datetime");

                    b.Property<string>("Cventrega")
                        .HasColumnName("CVENTREGA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvfilial")
                        .HasColumnName("CVFILIAL")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Cvlibcom")
                        .HasColumnName("CVLIBCOM")
                        .HasColumnType("datetime");

                    b.Property<string>("Cvnota")
                        .HasColumnName("CVNOTA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvobsv")
                        .HasColumnName("CVOBSV")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvpsuso")
                        .HasColumnName("CVPSUSO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvreceita")
                        .HasColumnName("CVRECEITA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvtick")
                        .HasColumnName("CVTICK")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvtitular")
                        .HasColumnName("CVTITULAR")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Cvvalocrz")
                        .HasColumnName("CVVALOCRZ")
                        .HasColumnType("REAL");

                    b.Property<double?>("Cvvalourv")
                        .HasColumnName("CVVALOURV")
                        .HasColumnType("REAL");

                    b.Property<string>("Fucdem")
                        .HasColumnName("FUCDEM")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fucodi")
                        .HasColumnName("FUCODI")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CONV");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Convenio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cvbalc")
                        .HasColumnName("CVBALC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Cvcomissao")
                        .HasColumnName("CVCOMISSAO")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Cvdata")
                        .HasColumnName("CVDATA")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Cvdtrec")
                        .HasColumnName("CVDTREC")
                        .HasColumnType("datetime");

                    b.Property<string>("Cventrega")
                        .HasColumnName("CVENTREGA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvfilial")
                        .HasColumnName("CVFILIAL")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Cvlibcom")
                        .HasColumnName("CVLIBCOM")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Cvmesdesc")
                        .HasColumnName("CVMESDESC")
                        .HasColumnType("datetime");

                    b.Property<string>("Cvnota")
                        .HasColumnName("CVNOTA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvobsv")
                        .HasColumnName("CVOBSV")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvpsuso")
                        .HasColumnName("CVPSUSO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvrec")
                        .HasColumnName("CVREC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvreceita")
                        .HasColumnName("CVRECEITA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvtick")
                        .HasColumnName("CVTICK")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvtitular")
                        .HasColumnName("CVTITULAR")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Cvvalocrz")
                        .HasColumnName("CVVALOCRZ")
                        .HasColumnType("REAL");

                    b.Property<double?>("Cvvalourv")
                        .HasColumnName("CVVALOURV")
                        .HasColumnType("REAL");

                    b.Property<string>("Fucdem")
                        .HasColumnName("FUCDEM")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fucodi")
                        .HasColumnName("FUCODI")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CONVENIO");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Debcli", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bacodi")
                        .HasColumnName("BACODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clbalc")
                        .HasColumnName("CLBALC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clcodi")
                        .HasColumnName("CLCODI")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Cldata")
                        .HasColumnName("CLDATA")
                        .HasColumnType("datetime");

                    b.Property<double?>("Cldesc")
                        .HasColumnName("CLDESC")
                        .HasColumnType("REAL");

                    b.Property<string>("Clobs")
                        .HasColumnName("CLOBS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clpago")
                        .HasColumnName("CLPAGO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Clqtde")
                        .HasColumnName("CLQTDE")
                        .HasColumnType("REAL");

                    b.Property<string>("Cltick")
                        .HasColumnName("CLTICK")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Comissao")
                        .HasColumnName("COMISSAO")
                        .HasColumnType("REAL");

                    b.Property<string>("Descomp")
                        .HasColumnName("DESCOMP")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DtPagto")
                        .HasColumnName("DT_PAGTO")
                        .HasColumnType("datetime");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("VlPago")
                        .HasColumnName("VL_PAGO")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("DEBCLI");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Acumulado")
                        .HasColumnName("ACUMULADO")
                        .HasColumnType("REAL");

                    b.Property<string>("Aposentado")
                        .HasColumnName("APOSENTADO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bairro")
                        .HasColumnName("BAIRRO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Balcon")
                        .HasColumnName("BALCON")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cep")
                        .HasColumnName("CEP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cidade")
                        .HasColumnName("CIDADE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clclassi")
                        .HasColumnName("CLCLASSI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clobs1")
                        .HasColumnName("CLOBS1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clobs2")
                        .HasColumnName("CLOBS2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codigo")
                        .HasColumnName("CODIGO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cpf")
                        .HasColumnName("CPF")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Datanasc")
                        .HasColumnName("DATANASC")
                        .HasColumnType("datetime");

                    b.Property<double?>("Descmed")
                        .HasColumnName("DESCMED")
                        .HasColumnType("REAL");

                    b.Property<double?>("Descout")
                        .HasColumnName("DESCOUT")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Dtcad")
                        .HasColumnName("DTCAD")
                        .HasColumnType("datetime");

                    b.Property<string>("Endereco")
                        .HasColumnName("ENDERECO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fone")
                        .HasColumnName("FONE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Impresso")
                        .HasColumnName("IMPRESSO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnName("NOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rg")
                        .HasColumnName("RG")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UltCompra")
                        .HasColumnName("ULT_COMPRA")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("DELIVERY");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Despesas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Caixa")
                        .HasColumnName("CAIXA")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Historico")
                        .HasColumnName("HISTORICO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("DESPESAS");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codgolden")
                        .HasColumnName("CODGOLDEN")
                        .HasColumnType("TEXT");

                    b.Property<double?>("DesAce")
                        .HasColumnName("DES_ACE")
                        .HasColumnType("REAL");

                    b.Property<double?>("DesB")
                        .HasColumnName("DES_B")
                        .HasColumnType("REAL");

                    b.Property<double?>("DesEtic")
                        .HasColumnName("DES_ETIC")
                        .HasColumnType("REAL");

                    b.Property<double?>("DesFech")
                        .HasColumnName("DES_FECH")
                        .HasColumnType("REAL");

                    b.Property<double?>("DesNota")
                        .HasColumnName("DES_NOTA")
                        .HasColumnType("REAL");

                    b.Property<double?>("DesPerf")
                        .HasColumnName("DES_PERF")
                        .HasColumnType("REAL");

                    b.Property<double?>("DesRest")
                        .HasColumnName("DES_REST")
                        .HasColumnType("REAL");

                    b.Property<string>("DesTick")
                        .HasColumnName("DES_TICK")
                        .HasColumnType("TEXT");

                    b.Property<double?>("DesVar")
                        .HasColumnName("DES_VAR")
                        .HasColumnType("REAL");

                    b.Property<string>("Descplac")
                        .HasColumnName("DESCPLAC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Embair")
                        .HasColumnName("EMBAIR")
                        .HasColumnType("TEXT");

                    b.Property<string>("Embloq")
                        .HasColumnName("EMBLOQ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emcep")
                        .HasColumnName("EMCEP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emcgce")
                        .HasColumnName("EMCGCE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emcida")
                        .HasColumnName("EMCIDA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emcodi")
                        .HasColumnName("EMCODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emcont")
                        .HasColumnName("EMCONT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emcontrato")
                        .HasColumnName("EMCONTRATO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Emdebito")
                        .HasColumnName("EMDEBITO")
                        .HasColumnType("REAL");

                    b.Property<string>("Emende")
                        .HasColumnName("EMENDE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emesta")
                        .HasColumnName("EMESTA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emetico")
                        .HasColumnName("EMETICO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emfax")
                        .HasColumnName("EMFAX")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emfech")
                        .HasColumnName("EMFECH")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emfilial")
                        .HasColumnName("EMFILIAL")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmgCorea")
                        .HasColumnName("EMGCoreA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Eminsc")
                        .HasColumnName("EMINSC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Emlimite")
                        .HasColumnName("EMLIMITE")
                        .HasColumnType("REAL");

                    b.Property<string>("Emnume")
                        .HasColumnName("EMNUME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emobs")
                        .HasColumnName("EMOBS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emobs1")
                        .HasColumnName("EMOBS1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emperf")
                        .HasColumnName("EMPERF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emprint")
                        .HasColumnName("EMPRINT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emraso")
                        .HasColumnName("EMRASO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emreceita")
                        .HasColumnName("EMRECEITA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emtele")
                        .HasColumnName("EMTELE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ibgeest")
                        .HasColumnName("IBGEEST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ibgemun")
                        .HasColumnName("IBGEMUN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Libperf")
                        .HasColumnName("LIBPERF")
                        .HasColumnType("TEXT");

                    b.Property<double?>("PercDesc")
                        .HasColumnName("PERC_DESC")
                        .HasColumnType("REAL");

                    b.Property<string>("Vidaav")
                        .HasColumnName("VIDAAV")
                        .HasColumnType("TEXT");

                    b.Property<string>("Vidalk")
                        .HasColumnName("VIDALK")
                        .HasColumnType("TEXT");

                    b.Property<string>("Vidapc")
                        .HasColumnName("VIDAPC")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EMPRESA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Encomen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Endata")
                        .HasColumnName("ENDATA")
                        .HasColumnType("datetime");

                    b.Property<double?>("Enqtde")
                        .HasColumnName("ENQTDE")
                        .HasColumnType("REAL");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ENCOMEN");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Ent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Descfin")
                        .HasColumnName("DESCFIN")
                        .HasColumnType("REAL");

                    b.Property<double?>("Desconto")
                        .HasColumnName("DESCONTO")
                        .HasColumnType("REAL");

                    b.Property<double?>("Descrep")
                        .HasColumnName("DESCREP")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Endata")
                        .HasColumnName("ENDATA")
                        .HasColumnType("datetime");

                    b.Property<double?>("Enqtde")
                        .HasColumnName("ENQTDE")
                        .HasColumnType("REAL");

                    b.Property<double?>("Envalo")
                        .HasColumnName("ENVALO")
                        .HasColumnType("REAL");

                    b.Property<double?>("Envalodes")
                        .HasColumnName("ENVALODES")
                        .HasColumnType("REAL");

                    b.Property<double?>("Estant")
                        .HasColumnName("ESTANT")
                        .HasColumnType("REAL");

                    b.Property<string>("Etiqueta")
                        .HasColumnName("ETIQUETA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fornec")
                        .HasColumnName("FORNEC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Impresso")
                        .HasColumnName("IMPRESSO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Impretq")
                        .HasColumnName("IMPRETQ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notafis")
                        .HasColumnName("NOTAFIS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prfabr")
                        .HasColumnName("PRFABR")
                        .HasColumnType("REAL");

                    b.Property<string>("Soetiq")
                        .HasColumnName("SOETIQ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Usuario")
                        .HasColumnName("USUARIO")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ENT");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Entpro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Descfin")
                        .HasColumnName("DESCFIN")
                        .HasColumnType("REAL");

                    b.Property<double?>("Desconto")
                        .HasColumnName("DESCONTO")
                        .HasColumnType("REAL");

                    b.Property<double?>("Descrep")
                        .HasColumnName("DESCREP")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Emissnf")
                        .HasColumnName("EMISSNF")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Endata")
                        .HasColumnName("ENDATA")
                        .HasColumnType("datetime");

                    b.Property<double?>("Enqtde")
                        .HasColumnName("ENQTDE")
                        .HasColumnType("REAL");

                    b.Property<double?>("Envalo")
                        .HasColumnName("ENVALO")
                        .HasColumnType("REAL");

                    b.Property<double?>("Envalodes")
                        .HasColumnName("ENVALODES")
                        .HasColumnType("REAL");

                    b.Property<double?>("Estant")
                        .HasColumnName("ESTANT")
                        .HasColumnType("REAL");

                    b.Property<string>("Etiqueta")
                        .HasColumnName("ETIQUETA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fornec")
                        .HasColumnName("FORNEC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Impresso")
                        .HasColumnName("IMPRESSO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Impretq")
                        .HasColumnName("IMPRETQ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lote")
                        .HasColumnName("LOTE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notafis")
                        .HasColumnName("NOTAFIS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prfabr")
                        .HasColumnName("PRFABR")
                        .HasColumnType("REAL");

                    b.Property<string>("Soetiq")
                        .HasColumnName("SOETIQ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Usuario")
                        .HasColumnName("USUARIO")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ENTPRO");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Estq0045", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("EstMinimo")
                        .HasColumnName("EST_MINIMO")
                        .HasColumnType("REAL");

                    b.Property<string>("Prbarra")
                        .HasColumnName("PRBARRA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcdse")
                        .HasColumnName("PRCDSE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesc")
                        .HasColumnName("PRDESC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prestq")
                        .HasColumnName("PRESTQ")
                        .HasColumnType("REAL");

                    b.Property<string>("Secao")
                        .HasColumnName("SECAO")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ESTQ0045");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Etiqperf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcons")
                        .HasColumnName("PRCONS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prconsf")
                        .HasColumnName("PRCONSF")
                        .HasColumnType("REAL");

                    b.Property<string>("Prdesc1")
                        .HasColumnName("PRDESC1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesc2")
                        .HasColumnName("PRDESC2")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ETIQPERF");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Etiqprom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcons")
                        .HasColumnName("PRCONS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prconsf")
                        .HasColumnName("PRCONSF")
                        .HasColumnType("REAL");

                    b.Property<string>("Prdesc1")
                        .HasColumnName("PRDESC1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesc2")
                        .HasColumnName("PRDESC2")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ETIQPROM");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Etiqueta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcons")
                        .HasColumnName("PRCONS")
                        .HasColumnType("REAL");

                    b.Property<string>("Prdesc1")
                        .HasColumnName("PRDESC1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesc2")
                        .HasColumnName("PRDESC2")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ETIQUETA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Faltas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Balcon")
                        .HasColumnName("BALCON")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FALTAS");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Fechconv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Fucdem")
                        .HasColumnName("FUCDEM")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("FECHCONV");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Filial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aplica1")
                        .HasColumnName("APLICA1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Aplica10")
                        .HasColumnName("APLICA10")
                        .HasColumnType("TEXT");

                    b.Property<string>("Aplica2")
                        .HasColumnName("APLICA2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Aplica3")
                        .HasColumnName("APLICA3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Aplica4")
                        .HasColumnName("APLICA4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Aplica5")
                        .HasColumnName("APLICA5")
                        .HasColumnType("TEXT");

                    b.Property<string>("Aplica6")
                        .HasColumnName("APLICA6")
                        .HasColumnType("TEXT");

                    b.Property<string>("Aplica7")
                        .HasColumnName("APLICA7")
                        .HasColumnType("TEXT");

                    b.Property<string>("Aplica8")
                        .HasColumnName("APLICA8")
                        .HasColumnType("TEXT");

                    b.Property<string>("Aplica9")
                        .HasColumnName("APLICA9")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Desc1")
                        .HasColumnName("DESC1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Desc10")
                        .HasColumnName("DESC10")
                        .HasColumnType("REAL");

                    b.Property<double?>("Desc2")
                        .HasColumnName("DESC2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Desc3")
                        .HasColumnName("DESC3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Desc4")
                        .HasColumnName("DESC4")
                        .HasColumnType("REAL");

                    b.Property<double?>("Desc5")
                        .HasColumnName("DESC5")
                        .HasColumnType("REAL");

                    b.Property<double?>("Desc6")
                        .HasColumnName("DESC6")
                        .HasColumnType("REAL");

                    b.Property<double?>("Desc7")
                        .HasColumnName("DESC7")
                        .HasColumnType("REAL");

                    b.Property<double?>("Desc8")
                        .HasColumnName("DESC8")
                        .HasColumnType("REAL");

                    b.Property<double?>("Desc9")
                        .HasColumnName("DESC9")
                        .HasColumnType("REAL");

                    b.Property<string>("Filcep")
                        .HasColumnName("FILCEP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filcgce")
                        .HasColumnName("FILCGCE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filcida")
                        .HasColumnName("FILCIDA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filcodi")
                        .HasColumnName("FILCODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filcont")
                        .HasColumnName("FILCONT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filende")
                        .HasColumnName("FILENDE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filesta")
                        .HasColumnName("FILESTA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filfax")
                        .HasColumnName("FILFAX")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filinsc")
                        .HasColumnName("FILINSC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filnome")
                        .HasColumnName("FILNOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filtele")
                        .HasColumnName("FILTELE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsec1")
                        .HasColumnName("SUBSEC1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsec10")
                        .HasColumnName("SUBSEC10")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsec2")
                        .HasColumnName("SUBSEC2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsec3")
                        .HasColumnName("SUBSEC3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsec4")
                        .HasColumnName("SUBSEC4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsec5")
                        .HasColumnName("SUBSEC5")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsec6")
                        .HasColumnName("SUBSEC6")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsec7")
                        .HasColumnName("SUBSEC7")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsec8")
                        .HasColumnName("SUBSEC8")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsec9")
                        .HasColumnName("SUBSEC9")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FILIAL");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Funcio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codgolden")
                        .HasColumnName("CODGOLDEN")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Datademi")
                        .HasColumnName("DATADEMI")
                        .HasColumnType("datetime");

                    b.Property<string>("Demitido")
                        .HasColumnName("DEMITIDO")
                        .HasColumnType("TEXT");

                    b.Property<string>("FCoredent")
                        .HasColumnName("FCoreDENT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fubai")
                        .HasColumnName("FUBAI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fubloq")
                        .HasColumnName("FUBLOQ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fucdem")
                        .HasColumnName("FUCDEM")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fucep")
                        .HasColumnName("FUCEP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fucid")
                        .HasColumnName("FUCID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fucodi")
                        .HasColumnName("FUCODI")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Fudata")
                        .HasColumnName("FUDATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Fudepto")
                        .HasColumnName("FUDEPTO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fuend")
                        .HasColumnName("FUEND")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fuest")
                        .HasColumnName("FUEST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fufone")
                        .HasColumnName("FUFONE")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Fulimite")
                        .HasColumnName("FULIMITE")
                        .HasColumnType("REAL");

                    b.Property<string>("Funome")
                        .HasColumnName("FUNOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fuobs1")
                        .HasColumnName("FUOBS1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fuobs2")
                        .HasColumnName("FUOBS2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fuobs3")
                        .HasColumnName("FUOBS3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fuplano")
                        .HasColumnName("FUPLANO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fusit")
                        .HasColumnName("FUSIT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Impresso")
                        .HasColumnName("IMPRESSO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Totdebcr")
                        .HasColumnName("TOTDEBCR")
                        .HasColumnType("REAL");

                    b.Property<double?>("Totdebsr")
                        .HasColumnName("TOTDEBSR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("FUNCIO");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Histor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Desconto")
                        .HasColumnName("DESCONTO")
                        .HasColumnType("REAL");

                    b.Property<string>("Distrib")
                        .HasColumnName("DISTRIB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notafis")
                        .HasColumnName("NOTAFIS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pedido")
                        .HasColumnName("PEDIDO")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Recebto")
                        .HasColumnName("RECEBTO")
                        .HasColumnType("datetime");

                    b.Property<double?>("Total")
                        .HasColumnName("TOTAL")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Vencto")
                        .HasColumnName("VENCTO")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("HISTOR");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Ibpt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .HasColumnName("CODIGO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imp1")
                        .HasColumnName("IMP1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imp2")
                        .HasColumnName("IMP2")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IBPT");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Invent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lote")
                        .HasColumnName("LOTE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesc")
                        .HasColumnName("PRDESC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prreg")
                        .HasColumnName("PRREG")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Qtde")
                        .HasColumnName("QTDE")
                        .HasColumnType("REAL");

                    b.Property<string>("Tpmed")
                        .HasColumnName("TPMED")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("INVENT");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Logsys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Nivel")
                        .HasColumnName("NIVEL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Opcao")
                        .HasColumnName("OPCAO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .HasColumnName("TIME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Usuario")
                        .HasColumnName("USUARIO")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LOGSYS");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Malclien", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Acumulado")
                        .HasColumnName("ACUMULADO")
                        .HasColumnType("REAL");

                    b.Property<string>("Aposentado")
                        .HasColumnName("APOSENTADO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bairro")
                        .HasColumnName("BAIRRO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Balcon")
                        .HasColumnName("BALCON")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cep")
                        .HasColumnName("CEP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cidade")
                        .HasColumnName("CIDADE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clclassi")
                        .HasColumnName("CLCLASSI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clobs1")
                        .HasColumnName("CLOBS1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clobs2")
                        .HasColumnName("CLOBS2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codigo")
                        .HasColumnName("CODIGO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cpf")
                        .HasColumnName("CPF")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Datanasc")
                        .HasColumnName("DATANASC")
                        .HasColumnType("datetime");

                    b.Property<double?>("Descmed")
                        .HasColumnName("DESCMED")
                        .HasColumnType("REAL");

                    b.Property<double?>("Descout")
                        .HasColumnName("DESCOUT")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Dtcad")
                        .HasColumnName("DTCAD")
                        .HasColumnType("datetime");

                    b.Property<string>("Endereco")
                        .HasColumnName("ENDERECO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filial")
                        .HasColumnName("FILIAL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fone")
                        .HasColumnName("FONE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Impresso")
                        .HasColumnName("IMPRESSO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnName("NOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rg")
                        .HasColumnName("RG")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UltCompra")
                        .HasColumnName("ULT_COMPRA")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("MALCLIEN");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Merctran", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comissao")
                        .HasColumnName("COMISSAO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Desconto")
                        .HasColumnName("DESCONTO")
                        .HasColumnType("REAL");

                    b.Property<string>("Descricao")
                        .HasColumnName("DESCRICAO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Estoque")
                        .HasColumnName("ESTOQUE")
                        .HasColumnType("REAL");

                    b.Property<string>("Etiqueta")
                        .HasColumnName("ETIQUETA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcons")
                        .HasColumnName("PRCONS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prconsd")
                        .HasColumnName("PRCONSD")
                        .HasColumnType("REAL");

                    b.Property<double?>("Qtde")
                        .HasColumnName("QTDE")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlTotal")
                        .HasColumnName("VL_TOTAL")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("MERCTRAN");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Mov", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Admcart")
                        .HasColumnName("ADMCART")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bacodi")
                        .HasColumnName("BACODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Caixa")
                        .HasColumnName("CAIXA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cancelado")
                        .HasColumnName("CANCELADO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Cartaoc")
                        .HasColumnName("CARTAOC")
                        .HasColumnType("REAL");

                    b.Property<double?>("Cheque")
                        .HasColumnName("CHEQUE")
                        .HasColumnType("REAL");

                    b.Property<double?>("Chequepre")
                        .HasColumnName("CHEQUEPRE")
                        .HasColumnType("REAL");

                    b.Property<string>("Codcli")
                        .HasColumnName("CODCLI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cpf")
                        .HasColumnName("CPF")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<double?>("Dinheiro")
                        .HasColumnName("DINHEIRO")
                        .HasColumnType("REAL");

                    b.Property<string>("Ecf")
                        .HasColumnName("ECF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hora")
                        .HasColumnName("HORA")
                        .HasColumnType("TEXT");

                    b.Property<string>("NFiscal")
                        .HasColumnName("N_FISCAL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnName("NOME")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Popular")
                        .HasColumnName("POPULAR")
                        .HasColumnType("REAL");

                    b.Property<string>("Ticket")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnName("TIPO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotAnt")
                        .HasColumnName("TOT_ANT")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotVen")
                        .HasColumnName("TOT_VEN")
                        .HasColumnType("REAL");

                    b.Property<string>("Tpvd")
                        .HasColumnName("TPVD")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MOV");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Movm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Admcart")
                        .HasColumnName("ADMCART")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bacodi")
                        .HasColumnName("BACODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Caixa")
                        .HasColumnName("CAIXA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cancelado")
                        .HasColumnName("CANCELADO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Cartaoc")
                        .HasColumnName("CARTAOC")
                        .HasColumnType("REAL");

                    b.Property<double?>("Cheque")
                        .HasColumnName("CHEQUE")
                        .HasColumnType("REAL");

                    b.Property<double?>("Chequepre")
                        .HasColumnName("CHEQUEPRE")
                        .HasColumnType("REAL");

                    b.Property<string>("Codcli")
                        .HasColumnName("CODCLI")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<double?>("Dinheiro")
                        .HasColumnName("DINHEIRO")
                        .HasColumnType("REAL");

                    b.Property<string>("Hora")
                        .HasColumnName("HORA")
                        .HasColumnType("TEXT");

                    b.Property<string>("NFiscal")
                        .HasColumnName("N_FISCAL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ticket")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnName("TIPO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotAnt")
                        .HasColumnName("TOT_ANT")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotVen")
                        .HasColumnName("TOT_VEN")
                        .HasColumnType("REAL");

                    b.Property<string>("Tpvd")
                        .HasColumnName("TPVD")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MOVM");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Movme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bacodi")
                        .HasColumnName("BACODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cancelado")
                        .HasColumnName("CANCELADO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codcli")
                        .HasColumnName("CODCLI")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Pedido")
                        .HasColumnName("PEDIDO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prqtde")
                        .HasColumnName("PRQTDE")
                        .HasColumnType("REAL");

                    b.Property<string>("Ticket")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnName("TIPO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotComis")
                        .HasColumnName("TOT_COMIS")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotDescon")
                        .HasColumnName("TOT_DESCON")
                        .HasColumnType("REAL");

                    b.Property<string>("Tpvd")
                        .HasColumnName("TPVD")
                        .HasColumnType("TEXT");

                    b.Property<double?>("VlTot")
                        .HasColumnName("VL_TOT")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlUnit")
                        .HasColumnName("VL_UNIT")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlliqCored")
                        .HasColumnName("VLLIQCoreD")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("MOVME");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Movmes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bacodi")
                        .HasColumnName("BACODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cancelado")
                        .HasColumnName("CANCELADO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codcli")
                        .HasColumnName("CODCLI")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Ecf")
                        .HasColumnName("ECF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pedido")
                        .HasColumnName("PEDIDO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prqtde")
                        .HasColumnName("PRQTDE")
                        .HasColumnType("REAL");

                    b.Property<string>("Ticket")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnName("TIPO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotComis")
                        .HasColumnName("TOT_COMIS")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotDescon")
                        .HasColumnName("TOT_DESCON")
                        .HasColumnType("REAL");

                    b.Property<string>("Tpvd")
                        .HasColumnName("TPVD")
                        .HasColumnType("TEXT");

                    b.Property<double?>("VlTot")
                        .HasColumnName("VL_TOT")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlUnit")
                        .HasColumnName("VL_UNIT")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlliqCored")
                        .HasColumnName("VLLIQCoreD")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("MOVMES");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Movnf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cancelado")
                        .HasColumnName("CANCELADO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cpf")
                        .HasColumnName("CPF")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Descricao")
                        .HasColumnName("DESCRICAO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ecf")
                        .HasColumnName("ECF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prqtde")
                        .HasColumnName("PRQTDE")
                        .HasColumnType("REAL");

                    b.Property<string>("Ticket")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.Property<double?>("VlTot")
                        .HasColumnName("VL_TOT")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlUnit")
                        .HasColumnName("VL_UNIT")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("MOVNF");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Movpop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BalcCpf")
                        .HasColumnName("BALC_CPF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cancelado")
                        .HasColumnName("CANCELADO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Compdia")
                        .HasColumnName("COMPDIA")
                        .HasColumnType("REAL");

                    b.Property<double?>("Compmes")
                        .HasColumnName("COMPMES")
                        .HasColumnType("REAL");

                    b.Property<string>("Cpfcli")
                        .HasColumnName("CPFCLI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Crm")
                        .HasColumnName("CRM")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datarec")
                        .HasColumnName("DATAREC")
                        .HasColumnType("datetime");

                    b.Property<string>("Ecf")
                        .HasColumnName("ECF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prqtde")
                        .HasColumnName("PRQTDE")
                        .HasColumnType("REAL");

                    b.Property<string>("Senha")
                        .HasColumnName("SENHA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ticket")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotDescon")
                        .HasColumnName("TOT_DESCON")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlTot")
                        .HasColumnName("VL_TOT")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlUnit")
                        .HasColumnName("VL_UNIT")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlliqCored")
                        .HasColumnName("VLLIQCoreD")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("MOVPOP");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Natureza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .HasColumnName("CODIGO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnName("NOME")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NATUREZA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Newcli", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bairro")
                        .HasColumnName("BAIRRO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cep")
                        .HasColumnName("CEP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cidade")
                        .HasColumnName("CIDADE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Clclassi")
                        .HasColumnName("CLCLASSI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codigo")
                        .HasColumnName("CODIGO")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Datanasc")
                        .HasColumnName("DATANASC")
                        .HasColumnType("datetime");

                    b.Property<double?>("Desconto")
                        .HasColumnName("DESCONTO")
                        .HasColumnType("REAL");

                    b.Property<string>("Endereco")
                        .HasColumnName("ENDERECO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fone")
                        .HasColumnName("FONE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Impresso")
                        .HasColumnName("IMPRESSO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnName("NOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rg")
                        .HasColumnName("RG")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnName("TIPO")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UltCompra")
                        .HasColumnName("ULT_COMPRA")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("NEWCLI");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Newfunc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codgolden")
                        .HasColumnName("CODGOLDEN")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Datademi")
                        .HasColumnName("DATADEMI")
                        .HasColumnType("datetime");

                    b.Property<string>("Demitido")
                        .HasColumnName("DEMITIDO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fubai")
                        .HasColumnName("FUBAI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fubloq")
                        .HasColumnName("FUBLOQ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fucdem")
                        .HasColumnName("FUCDEM")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fucep")
                        .HasColumnName("FUCEP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fucid")
                        .HasColumnName("FUCID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fucodi")
                        .HasColumnName("FUCODI")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Fudata")
                        .HasColumnName("FUDATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Fudepto")
                        .HasColumnName("FUDEPTO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fuend")
                        .HasColumnName("FUEND")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fuest")
                        .HasColumnName("FUEST")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fufone")
                        .HasColumnName("FUFONE")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Fulimite")
                        .HasColumnName("FULIMITE")
                        .HasColumnType("REAL");

                    b.Property<string>("Funome")
                        .HasColumnName("FUNOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fuobs1")
                        .HasColumnName("FUOBS1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fuobs2")
                        .HasColumnName("FUOBS2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fuobs3")
                        .HasColumnName("FUOBS3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fusit")
                        .HasColumnName("FUSIT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Impresso")
                        .HasColumnName("IMPRESSO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Totdebcr")
                        .HasColumnName("TOTDEBCR")
                        .HasColumnType("REAL");

                    b.Property<double?>("Totdebsr")
                        .HasColumnName("TOTDEBSR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("NEWFUNC");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Newprec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Prcddt")
                        .HasColumnName("PRCDDT")
                        .HasColumnType("datetime");

                    b.Property<double?>("Prcdlucr")
                        .HasColumnName("PRCDLUCR")
                        .HasColumnType("REAL");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcons")
                        .HasColumnName("PRCONS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prconscv")
                        .HasColumnName("PRCONSCV")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prfabr")
                        .HasColumnName("PRFABR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("NEWPREC");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Newprod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Coddcb")
                        .HasColumnName("CODDCB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codesta")
                        .HasColumnName("CODESTA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codfis")
                        .HasColumnName("CODFIS")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Comissao")
                        .HasColumnName("COMISSAO")
                        .HasColumnType("REAL");

                    b.Property<double?>("DescMax")
                        .HasColumnName("DESC_MAX")
                        .HasColumnType("REAL");

                    b.Property<double?>("EstMinimo")
                        .HasColumnName("EST_MINIMO")
                        .HasColumnType("REAL");

                    b.Property<string>("Etbarra")
                        .HasColumnName("ETBARRA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Etgraf")
                        .HasColumnName("ETGRAF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prbarra")
                        .HasColumnName("PRBARRA")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Prcddt")
                        .HasColumnName("PRCDDT")
                        .HasColumnType("datetime");

                    b.Property<string>("Prcdimp")
                        .HasColumnName("PRCDIMP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcdimp2")
                        .HasColumnName("PRCDIMP2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcdla")
                        .HasColumnName("PRCDLA")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcdlucr")
                        .HasColumnName("PRCDLUCR")
                        .HasColumnType("REAL");

                    b.Property<string>("Prcdse")
                        .HasColumnName("PRCDSE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prclas")
                        .HasColumnName("PRCLAS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcons")
                        .HasColumnName("PRCONS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prconscv")
                        .HasColumnName("PRCONSCV")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Prdata")
                        .HasColumnName("PRDATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Prdesc")
                        .HasColumnName("PRDESC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesconv")
                        .HasColumnName("PRDESCONV")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Prdtul")
                        .HasColumnName("PRDTUL")
                        .HasColumnType("datetime");

                    b.Property<double?>("Premb")
                        .HasColumnName("PREMB")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prentr")
                        .HasColumnName("PRENTR")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prestq")
                        .HasColumnName("PRESTQ")
                        .HasColumnType("REAL");

                    b.Property<string>("Pretiq")
                        .HasColumnName("PRETIQ")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prfabr")
                        .HasColumnName("PRFABR")
                        .HasColumnType("REAL");

                    b.Property<double?>("Pricms")
                        .HasColumnName("PRICMS")
                        .HasColumnType("REAL");

                    b.Property<string>("Prloca")
                        .HasColumnName("PRLOCA")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prmesant")
                        .HasColumnName("PRMESANT")
                        .HasColumnType("REAL");

                    b.Property<string>("Prneutro")
                        .HasColumnName("PRNEUTRO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prnola")
                        .HasColumnName("PRNOLA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prnose")
                        .HasColumnName("PRNOSE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prpis")
                        .HasColumnName("PRPIS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prpopular")
                        .HasColumnName("PRPOPULAR")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prporta")
                        .HasColumnName("PRPORTA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prpos")
                        .HasColumnName("PRPOS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prpret")
                        .HasColumnName("PRPRET")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prreg")
                        .HasColumnName("PRREG")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prsal")
                        .HasColumnName("PRSAL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prsitu")
                        .HasColumnName("PRSITU")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prtestq")
                        .HasColumnName("PRTESTQ")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prulte")
                        .HasColumnName("PRULTE")
                        .HasColumnType("REAL");

                    b.Property<string>("Secao")
                        .HasColumnName("SECAO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnName("TIPO")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UlVen")
                        .HasColumnName("UL_VEN")
                        .HasColumnType("datetime");

                    b.Property<string>("Ultfor")
                        .HasColumnName("ULTFOR")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Ultped")
                        .HasColumnName("ULTPED")
                        .HasColumnType("datetime");

                    b.Property<double?>("Vendant")
                        .HasColumnName("VENDANT")
                        .HasColumnType("REAL");

                    b.Property<double?>("Vendatu")
                        .HasColumnName("VENDATU")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("NEWPROD");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Newtab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mesano")
                        .HasColumnName("MESANO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Newtab1")
                        .HasColumnName("NEWTAB")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NEWTAB");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Nfe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Campo")
                        .HasColumnName("CAMPO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codigo")
                        .HasColumnName("CODIGO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnName("DESCRICAO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icms")
                        .HasColumnName("ICMS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imp")
                        .HasColumnName("IMP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ncm")
                        .HasColumnName("NCM")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcdimp")
                        .HasColumnName("PRCDIMP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qtde")
                        .HasColumnName("QTDE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("TEXT");

                    b.Property<string>("Vltot")
                        .HasColumnName("VLTOT")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NFE");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Base")
                        .HasColumnName("BASE")
                        .HasColumnType("REAL");

                    b.Property<double?>("Basesub")
                        .HasColumnName("BASESUB")
                        .HasColumnType("REAL");

                    b.Property<string>("Cliente")
                        .HasColumnName("CLIENTE")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Icms")
                        .HasColumnName("ICMS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Icmssub")
                        .HasColumnName("ICMSSUB")
                        .HasColumnType("REAL");

                    b.Property<string>("NFiscal")
                        .HasColumnName("N_FISCAL")
                        .HasColumnType("TEXT");

                    b.Property<string>("NNatu")
                        .HasColumnName("N_NATU")
                        .HasColumnType("TEXT");

                    b.Property<string>("Natureza")
                        .HasColumnName("NATUREZA")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Nbase12")
                        .HasColumnName("NBASE12")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nbase18")
                        .HasColumnName("NBASE18")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nbase25")
                        .HasColumnName("NBASE25")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nbase7")
                        .HasColumnName("NBASE7")
                        .HasColumnType("REAL");

                    b.Property<string>("Ncancelada")
                        .HasColumnName("NCANCELADA")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Ndata")
                        .HasColumnName("NDATA")
                        .HasColumnType("datetime");

                    b.Property<double?>("Nicms12")
                        .HasColumnName("NICMS12")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nicms18")
                        .HasColumnName("NICMS18")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nicms25")
                        .HasColumnName("NICMS25")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nicms7")
                        .HasColumnName("NICMS7")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nvalor")
                        .HasColumnName("NVALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("NOTA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Notaf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NumNota")
                        .HasColumnName("NUM_NOTA")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NOTAF");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Nped", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Numped")
                        .HasColumnName("NUMPED")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NPED");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.NumTmp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Numero")
                        .HasColumnName("NUMERO")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NumTmp");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Numped", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Desconto")
                        .HasColumnName("DESCONTO")
                        .HasColumnType("REAL");

                    b.Property<string>("Fornec")
                        .HasColumnName("FORNEC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Numero")
                        .HasColumnName("NUMERO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Przentrega")
                        .HasColumnName("PRZENTREGA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Przpagto")
                        .HasColumnName("PRZPAGTO")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NUMPED");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Ped0204", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codint")
                        .HasColumnName("CODINT")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Eloja1")
                        .HasColumnName("ELOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja2")
                        .HasColumnName("ELOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja3")
                        .HasColumnName("ELOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja4")
                        .HasColumnName("ELOJA4")
                        .HasColumnType("REAL");

                    b.Property<string>("Forn")
                        .HasColumnName("FORN")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Mloja1")
                        .HasColumnName("MLOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja2")
                        .HasColumnName("MLOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja3")
                        .HasColumnName("MLOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja4")
                        .HasColumnName("MLOJA4")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja1")
                        .HasColumnName("NLOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja2")
                        .HasColumnName("NLOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja3")
                        .HasColumnName("NLOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja4")
                        .HasColumnName("NLOJA4")
                        .HasColumnType("REAL");

                    b.Property<string>("Prbarra")
                        .HasColumnName("PRBARRA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesc")
                        .HasColumnName("PRDESC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("PED0204");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Ped0301", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codint")
                        .HasColumnName("CODINT")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Eloja1")
                        .HasColumnName("ELOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja2")
                        .HasColumnName("ELOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja3")
                        .HasColumnName("ELOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja4")
                        .HasColumnName("ELOJA4")
                        .HasColumnType("REAL");

                    b.Property<string>("Forn")
                        .HasColumnName("FORN")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Mloja1")
                        .HasColumnName("MLOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja2")
                        .HasColumnName("MLOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja3")
                        .HasColumnName("MLOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja4")
                        .HasColumnName("MLOJA4")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja1")
                        .HasColumnName("NLOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja2")
                        .HasColumnName("NLOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja3")
                        .HasColumnName("NLOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja4")
                        .HasColumnName("NLOJA4")
                        .HasColumnType("REAL");

                    b.Property<string>("Prbarra")
                        .HasColumnName("PRBARRA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesc")
                        .HasColumnName("PRDESC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("PED0301");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Ped0406", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codint")
                        .HasColumnName("CODINT")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Eloja1")
                        .HasColumnName("ELOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja2")
                        .HasColumnName("ELOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja3")
                        .HasColumnName("ELOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja4")
                        .HasColumnName("ELOJA4")
                        .HasColumnType("REAL");

                    b.Property<string>("Forn")
                        .HasColumnName("FORN")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Mloja1")
                        .HasColumnName("MLOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja2")
                        .HasColumnName("MLOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja3")
                        .HasColumnName("MLOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja4")
                        .HasColumnName("MLOJA4")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja1")
                        .HasColumnName("NLOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja2")
                        .HasColumnName("NLOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja3")
                        .HasColumnName("NLOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja4")
                        .HasColumnName("NLOJA4")
                        .HasColumnType("REAL");

                    b.Property<string>("Prbarra")
                        .HasColumnName("PRBARRA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesc")
                        .HasColumnName("PRDESC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("PED0406");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Ped1103", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codint")
                        .HasColumnName("CODINT")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Eloja1")
                        .HasColumnName("ELOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja2")
                        .HasColumnName("ELOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja3")
                        .HasColumnName("ELOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja4")
                        .HasColumnName("ELOJA4")
                        .HasColumnType("REAL");

                    b.Property<string>("Forn")
                        .HasColumnName("FORN")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Mloja1")
                        .HasColumnName("MLOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja2")
                        .HasColumnName("MLOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja3")
                        .HasColumnName("MLOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja4")
                        .HasColumnName("MLOJA4")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja1")
                        .HasColumnName("NLOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja2")
                        .HasColumnName("NLOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja3")
                        .HasColumnName("NLOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja4")
                        .HasColumnName("NLOJA4")
                        .HasColumnType("REAL");

                    b.Property<string>("Prbarra")
                        .HasColumnName("PRBARRA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesc")
                        .HasColumnName("PRDESC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("PED1103");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Ped1406", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codint")
                        .HasColumnName("CODINT")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Eloja1")
                        .HasColumnName("ELOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja2")
                        .HasColumnName("ELOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja3")
                        .HasColumnName("ELOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja4")
                        .HasColumnName("ELOJA4")
                        .HasColumnType("REAL");

                    b.Property<string>("Forn")
                        .HasColumnName("FORN")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Mloja1")
                        .HasColumnName("MLOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja2")
                        .HasColumnName("MLOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja3")
                        .HasColumnName("MLOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja4")
                        .HasColumnName("MLOJA4")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja1")
                        .HasColumnName("NLOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja2")
                        .HasColumnName("NLOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja3")
                        .HasColumnName("NLOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja4")
                        .HasColumnName("NLOJA4")
                        .HasColumnType("REAL");

                    b.Property<string>("Prbarra")
                        .HasColumnName("PRBARRA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesc")
                        .HasColumnName("PRDESC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("PED1406");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Ped1912", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codint")
                        .HasColumnName("CODINT")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Eloja1")
                        .HasColumnName("ELOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja2")
                        .HasColumnName("ELOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja3")
                        .HasColumnName("ELOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Eloja4")
                        .HasColumnName("ELOJA4")
                        .HasColumnType("REAL");

                    b.Property<string>("Forn")
                        .HasColumnName("FORN")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Mloja1")
                        .HasColumnName("MLOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja2")
                        .HasColumnName("MLOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja3")
                        .HasColumnName("MLOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Mloja4")
                        .HasColumnName("MLOJA4")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja1")
                        .HasColumnName("NLOJA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja2")
                        .HasColumnName("NLOJA2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja3")
                        .HasColumnName("NLOJA3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Nloja4")
                        .HasColumnName("NLOJA4")
                        .HasColumnType("REAL");

                    b.Property<string>("Prbarra")
                        .HasColumnName("PRBARRA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesc")
                        .HasColumnName("PRDESC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("PED1912");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Pedidos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prcdla")
                        .HasColumnName("PRCDLA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Prdata")
                        .HasColumnName("PRDATA")
                        .HasColumnType("datetime");

                    b.Property<double?>("Prfabr")
                        .HasColumnName("PRFABR")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prqtde")
                        .HasColumnName("PRQTDE")
                        .HasColumnType("REAL");

                    b.Property<string>("Status")
                        .HasColumnName("STATUS")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PEDIDOS");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Prodextr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Concor1")
                        .HasColumnName("CONCOR1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Concor2")
                        .HasColumnName("CONCOR2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Concor3")
                        .HasColumnName("CONCOR3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Concor4")
                        .HasColumnName("CONCOR4")
                        .HasColumnType("REAL");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcons")
                        .HasColumnName("PRCONS")
                        .HasColumnType("REAL");

                    b.Property<string>("Prdesc")
                        .HasColumnName("PRDESC")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PRODEXTR");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Coddcb")
                        .HasColumnName("CODDCB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codesta")
                        .HasColumnName("CODESTA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codfis")
                        .HasColumnName("CODFIS")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Comissao")
                        .HasColumnName("COMISSAO")
                        .HasColumnType("REAL");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double?>("DescMax")
                        .HasColumnName("DESC_MAX")
                        .HasColumnType("REAL");

                    b.Property<double?>("EstMinimo")
                        .HasColumnName("EST_MINIMO")
                        .HasColumnType("REAL");

                    b.Property<string>("Etbarra")
                        .HasColumnName("ETBARRA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Etgraf")
                        .HasColumnName("ETGRAF")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prbarra")
                        .HasColumnName("PRBARRA")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Prcddt")
                        .HasColumnName("PRCDDT")
                        .HasColumnType("datetime");

                    b.Property<string>("Prcdimp")
                        .HasColumnName("PRCDIMP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcdimp2")
                        .HasColumnName("PRCDIMP2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcdla")
                        .HasColumnName("PRCDLA")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcdlucr")
                        .HasColumnName("PRCDLUCR")
                        .HasColumnType("REAL");

                    b.Property<string>("Prcdse")
                        .HasColumnName("PRCDSE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prclas")
                        .HasColumnName("PRCLAS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcons")
                        .HasColumnName("PRCONS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prconscv")
                        .HasColumnName("PRCONSCV")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Prdata")
                        .HasColumnName("PRDATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Prdesc")
                        .HasColumnName("PRDESC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesconv")
                        .HasColumnName("PRDESCONV")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Prdtul")
                        .HasColumnName("PRDTUL")
                        .HasColumnType("datetime");

                    b.Property<double?>("Premb")
                        .HasColumnName("PREMB")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prentr")
                        .HasColumnName("PRENTR")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prestq")
                        .HasColumnName("PRESTQ")
                        .HasColumnType("REAL");

                    b.Property<string>("Pretiq")
                        .HasColumnName("PRETIQ")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prfabr")
                        .HasColumnName("PRFABR")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prfinal")
                        .HasColumnName("PRFINAL")
                        .HasColumnType("REAL");

                    b.Property<string>("Prfixa")
                        .HasColumnName("PRFIXA")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Pricms")
                        .HasColumnName("PRICMS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prinicial")
                        .HasColumnName("PRINICIAL")
                        .HasColumnType("REAL");

                    b.Property<string>("Prloca")
                        .HasColumnName("PRLOCA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prlote")
                        .HasColumnName("PRLOTE")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prmesant")
                        .HasColumnName("PRMESANT")
                        .HasColumnType("REAL");

                    b.Property<string>("Prncms")
                        .HasColumnName("PRNCMS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prneutro")
                        .HasColumnName("PRNEUTRO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prnola")
                        .HasColumnName("PRNOLA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prnose")
                        .HasColumnName("PRNOSE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prpis")
                        .HasColumnName("PRPIS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prpopular")
                        .HasColumnName("PRPOPULAR")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prporta")
                        .HasColumnName("PRPORTA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prpos")
                        .HasColumnName("PRPOS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prpret")
                        .HasColumnName("PRPRET")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prprinci")
                        .HasColumnName("PRPRINCI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prpromo")
                        .HasColumnName("PRPROMO")
                        .HasColumnType("REAL");

                    b.Property<string>("Prreg")
                        .HasColumnName("PRREG")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prsal")
                        .HasColumnName("PRSAL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prsitu")
                        .HasColumnName("PRSITU")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prtestq")
                        .HasColumnName("PRTESTQ")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prulte")
                        .HasColumnName("PRULTE")
                        .HasColumnType("REAL");

                    b.Property<string>("Prun")
                        .HasColumnName("PRUN")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Prvalid")
                        .HasColumnName("PRVALID")
                        .HasColumnType("datetime");

                    b.Property<string>("Secao")
                        .HasColumnName("SECAO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnName("TIPO")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UlVen")
                        .HasColumnName("UL_VEN")
                        .HasColumnType("datetime");

                    b.Property<string>("Ultfor")
                        .HasColumnName("ULTFOR")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Ultped")
                        .HasColumnName("ULTPED")
                        .HasColumnType("datetime");

                    b.Property<double?>("Ultpreco")
                        .HasColumnName("ULTPRECO")
                        .HasColumnType("REAL");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Vendant")
                        .HasColumnName("VENDANT")
                        .HasColumnType("REAL");

                    b.Property<double?>("Vendatu")
                        .HasColumnName("VENDATU")
                        .HasColumnType("REAL");

                    b.Property<double?>("Vlcomis")
                        .HasColumnName("VLCOMIS")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("PRODUTO");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Psico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barras")
                        .HasColumnName("BARRAS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cid")
                        .HasColumnName("CID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cnpj")
                        .HasColumnName("CNPJ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Crm")
                        .HasColumnName("CRM")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Emissao")
                        .HasColumnName("EMISSAO")
                        .HasColumnType("datetime");

                    b.Property<string>("Fone")
                        .HasColumnName("FONE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fornec")
                        .HasColumnName("FORNEC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Idade")
                        .HasColumnName("IDADE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lote")
                        .HasColumnName("LOTE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Motivo")
                        .HasColumnName("MOTIVO")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Nasc")
                        .HasColumnName("NASC")
                        .HasColumnType("datetime");

                    b.Property<string>("Nf")
                        .HasColumnName("NF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnName("NOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nomemed")
                        .HasColumnName("NOMEMED")
                        .HasColumnType("TEXT");

                    b.Property<string>("Orgao")
                        .HasColumnName("ORGAO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Paciente")
                        .HasColumnName("PACIENTE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Porta")
                        .HasColumnName("PORTA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prdesc")
                        .HasColumnName("PRDESC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prolong")
                        .HasColumnName("PROLONG")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prreg")
                        .HasColumnName("PRREG")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Qtde")
                        .HasColumnName("QTDE")
                        .HasColumnType("REAL");

                    b.Property<string>("Receita")
                        .HasColumnName("RECEITA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rg")
                        .HasColumnName("RG")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sexo")
                        .HasColumnName("SEXO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ticket")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnName("TIPO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tpcons")
                        .HasColumnName("TPCONS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tpidade")
                        .HasColumnName("TPIDADE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tpmed")
                        .HasColumnName("TPMED")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tpreceita")
                        .HasColumnName("TPRECEITA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uf")
                        .HasColumnName("UF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ufcons")
                        .HasColumnName("UFCONS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unidade")
                        .HasColumnName("UNIDADE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Usomed")
                        .HasColumnName("USOMED")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PSICO");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Rancliqt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bacodi")
                        .HasColumnName("BACODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cancelado")
                        .HasColumnName("CANCELADO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codcli")
                        .HasColumnName("CODCLI")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prqtde")
                        .HasColumnName("PRQTDE")
                        .HasColumnType("REAL");

                    b.Property<string>("Ticket")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnName("TIPO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotComis")
                        .HasColumnName("TOT_COMIS")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotDescon")
                        .HasColumnName("TOT_DESCON")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlTot")
                        .HasColumnName("VL_TOT")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlUnit")
                        .HasColumnName("VL_UNIT")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("RANCLIQT");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Ranclivl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bacodi")
                        .HasColumnName("BACODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Caixa")
                        .HasColumnName("CAIXA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cancelado")
                        .HasColumnName("CANCELADO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Codcli")
                        .HasColumnName("CODCLI")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Hora")
                        .HasColumnName("HORA")
                        .HasColumnType("TEXT");

                    b.Property<string>("NFiscal")
                        .HasColumnName("N_FISCAL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ticket")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .HasColumnName("TIPO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotVen")
                        .HasColumnName("TOT_VEN")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("RANCLIVL");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Reconst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArqCorevo")
                        .HasColumnName("ARQCoreVO")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Necessita")
                        .HasColumnName("NECESSITA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Posicao")
                        .HasColumnName("POSICAO")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RECONST");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Reducao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Acresc")
                        .HasColumnName("ACRESC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Acresfin")
                        .HasColumnName("ACRESFIN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Aliquota")
                        .HasColumnName("ALIQUOTA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cancela")
                        .HasColumnName("CANCELA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cns")
                        .HasColumnName("CNS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cnsi")
                        .HasColumnName("CNSI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Coo")
                        .HasColumnName("COO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Desconto")
                        .HasColumnName("DESCONTO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gtda")
                        .HasColumnName("GTDA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nsi")
                        .HasColumnName("NSI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rzaut")
                        .HasColumnName("RZAUT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sangria")
                        .HasColumnName("SANGRIA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Supri")
                        .HasColumnName("SUPRI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tributo")
                        .HasColumnName("TRIBUTO")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("REDUCAO");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Relator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nivel")
                        .HasColumnName("NIVEL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Relatorio")
                        .HasColumnName("RELATORIO")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("relator");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.ResAno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("CliAtds")
                        .HasColumnName("CLI_ATDS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Descrec")
                        .HasColumnName("DESCREC")
                        .HasColumnType("REAL");

                    b.Property<double?>("Diastrab")
                        .HasColumnName("DIASTRAB")
                        .HasColumnType("REAL");

                    b.Property<double?>("Entradas")
                        .HasColumnName("ENTRADAS")
                        .HasColumnType("REAL");

                    b.Property<string>("MesRef")
                        .HasColumnName("MES_REF")
                        .HasColumnType("TEXT");

                    b.Property<double?>("RecFiado")
                        .HasColumnName("REC_FIADO")
                        .HasColumnType("REAL");

                    b.Property<double?>("TotEstoq")
                        .HasColumnName("TOT_ESTOQ")
                        .HasColumnType("REAL");

                    b.Property<double?>("VdaConv")
                        .HasColumnName("VDA_CONV")
                        .HasColumnType("REAL");

                    b.Property<double?>("VdaVista")
                        .HasColumnName("VDA_VISTA")
                        .HasColumnType("REAL");

                    b.Property<double?>("VenFiado")
                        .HasColumnName("VEN_FIADO")
                        .HasColumnType("REAL");

                    b.Property<double?>("VenMes")
                        .HasColumnName("VEN_MES")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ResAno");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Retirada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Caixa")
                        .HasColumnName("CAIXA")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Hora")
                        .HasColumnName("HORA")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Valorch")
                        .HasColumnName("VALORCH")
                        .HasColumnType("REAL");

                    b.Property<double?>("Valordh")
                        .HasColumnName("VALORDH")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("RETIRADA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Sal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Salcod")
                        .HasColumnName("SALCOD")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salnome")
                        .HasColumnName("SALNOME")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SAL");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Secao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Secodi")
                        .HasColumnName("SECODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senome")
                        .HasColumnName("SENOME")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SECAO");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Senha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sen")
                        .HasColumnName("SEN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sencheq")
                        .HasColumnName("SENCHEQ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sencit")
                        .HasColumnName("SENCIT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senclich")
                        .HasColumnName("SENCLICH")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senclip")
                        .HasColumnName("SENCLIP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sencont")
                        .HasColumnName("SENCONT")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Sendate")
                        .HasColumnName("SENDATE")
                        .HasColumnType("datetime");

                    b.Property<string>("Sendefa")
                        .HasColumnName("SENDEFA")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Sendesc")
                        .HasColumnName("SENDESC")
                        .HasColumnType("REAL");

                    b.Property<double?>("Sendesc1")
                        .HasColumnName("SENDESC1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Sendesc2")
                        .HasColumnName("SENDESC2")
                        .HasColumnType("REAL");

                    b.Property<double?>("Sendesc3")
                        .HasColumnName("SENDESC3")
                        .HasColumnType("REAL");

                    b.Property<double?>("Sendesc4")
                        .HasColumnName("SENDESC4")
                        .HasColumnType("REAL");

                    b.Property<double?>("Sendesc5")
                        .HasColumnName("SENDESC5")
                        .HasColumnType("REAL");

                    b.Property<double?>("Sendesc6")
                        .HasColumnName("SENDESC6")
                        .HasColumnType("REAL");

                    b.Property<double?>("Sendia")
                        .HasColumnName("SENDIA")
                        .HasColumnType("REAL");

                    b.Property<string>("Senestq")
                        .HasColumnName("SENESTQ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senetq")
                        .HasColumnName("SENETQ")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senetqb")
                        .HasColumnName("SENETQB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senetqe")
                        .HasColumnName("SENETQE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senetqp")
                        .HasColumnName("SENETQP")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senfia")
                        .HasColumnName("SENFIA")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Senfiacr")
                        .HasColumnName("SENFIACR")
                        .HasColumnType("REAL");

                    b.Property<double?>("Senfiatr")
                        .HasColumnName("SENFIATR")
                        .HasColumnType("REAL");

                    b.Property<string>("Senfis")
                        .HasColumnName("SENFIS")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Senlin")
                        .HasColumnName("SENLIN")
                        .HasColumnType("REAL");

                    b.Property<string>("Senman")
                        .HasColumnName("SENMAN")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Senmdprint")
                        .HasColumnName("SENMDPRINT")
                        .HasColumnType("REAL");

                    b.Property<double?>("Senmulta")
                        .HasColumnName("SENMULTA")
                        .HasColumnType("REAL");

                    b.Property<string>("Senniv")
                        .HasColumnName("SENNIV")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senpar")
                        .HasColumnName("SENPAR")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Senpcli")
                        .HasColumnName("SENPCLI")
                        .HasColumnType("datetime");

                    b.Property<double?>("Senpme")
                        .HasColumnName("SENPME")
                        .HasColumnType("REAL");

                    b.Property<double?>("Senponto")
                        .HasColumnName("SENPONTO")
                        .HasColumnType("REAL");

                    b.Property<string>("Senport")
                        .HasColumnName("SENPORT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senprint")
                        .HasColumnName("SENPRINT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senprot")
                        .HasColumnName("SENPROT")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senrec")
                        .HasColumnName("SENREC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senrel")
                        .HasColumnName("SENREL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senrepete")
                        .HasColumnName("SENREPETE")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senver")
                        .HasColumnName("SENVER")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Senvlpon")
                        .HasColumnName("SENVLPON")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SENHA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Servico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Svcodi")
                        .HasColumnName("SVCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Svcomb")
                        .HasColumnName("SVCOMB")
                        .HasColumnType("REAL");

                    b.Property<string>("Svdesc")
                        .HasColumnName("SVDESC")
                        .HasColumnType("TEXT");

                    b.Property<string>("Svpr01")
                        .HasColumnName("SVPR01")
                        .HasColumnType("TEXT");

                    b.Property<string>("Svpr02")
                        .HasColumnName("SVPR02")
                        .HasColumnType("TEXT");

                    b.Property<string>("Svpr03")
                        .HasColumnName("SVPR03")
                        .HasColumnType("TEXT");

                    b.Property<string>("Svpr04")
                        .HasColumnName("SVPR04")
                        .HasColumnType("TEXT");

                    b.Property<string>("Svpr05")
                        .HasColumnName("SVPR05")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Svprec")
                        .HasColumnName("SVPREC")
                        .HasColumnType("REAL");

                    b.Property<double?>("Svven1")
                        .HasColumnName("SVVEN1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Svven2")
                        .HasColumnName("SVVEN2")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SERVICO");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Sistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ticket")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.Property<string>("Usuario")
                        .HasColumnName("USUARIO")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SISTEMA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Slpharma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reconst")
                        .HasColumnName("RECONST")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SLPHARMA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Subsecao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Secaopert")
                        .HasColumnName("SECAOPERT")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Subimpost")
                        .HasColumnName("SUBIMPOST")
                        .HasColumnType("REAL");

                    b.Property<string>("Subncm")
                        .HasColumnName("SUBNCM")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsecodi")
                        .HasColumnName("SUBSECODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Subselucr")
                        .HasColumnName("SUBSELUCR")
                        .HasColumnType("REAL");

                    b.Property<string>("Subsenome")
                        .HasColumnName("SUBSENOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subseprec")
                        .HasColumnName("SUBSEPREC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Valrec")
                        .HasColumnName("VALREC")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SUBSECAO");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Tabela", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abc")
                        .HasColumnName("ABC")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Barra")
                        .HasColumnName("BARRA")
                        .HasColumnType("REAL");

                    b.Property<string>("Ctr")
                        .HasColumnName("CTR")
                        .HasColumnType("TEXT");

                    b.Property<string>("Custom")
                        .HasColumnName("CUSTOM")
                        .HasColumnType("TEXT");

                    b.Property<string>("Des")
                        .HasColumnName("DES")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Dtvig")
                        .HasColumnName("DTVIG")
                        .HasColumnType("datetime");

                    b.Property<double?>("Fra1")
                        .HasColumnName("FRA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Ipi")
                        .HasColumnName("IPI")
                        .HasColumnType("REAL");

                    b.Property<string>("LabNom")
                        .HasColumnName("LAB_NOM")
                        .HasColumnType("TEXT");

                    b.Property<string>("MedApr")
                        .HasColumnName("MED_APR")
                        .HasColumnType("TEXT");

                    b.Property<string>("MedDes")
                        .HasColumnName("MED_DES")
                        .HasColumnType("TEXT");

                    b.Property<string>("MedPrinci")
                        .HasColumnName("MED_PRINCI")
                        .HasColumnType("TEXT");

                    b.Property<string>("MedRegims")
                        .HasColumnName("MED_REGIMS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Negpos")
                        .HasColumnName("NEGPOS")
                        .HasColumnType("TEXT");

                    b.Property<string>("Neutro")
                        .HasColumnName("NEUTRO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .HasColumnName("NOM")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Pco1")
                        .HasColumnName("PCO1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Pla1")
                        .HasColumnName("PLA1")
                        .HasColumnType("REAL");

                    b.Property<double?>("Uni")
                        .HasColumnName("UNI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TABELA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Temp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Desconto")
                        .HasColumnName("DESCONTO")
                        .HasColumnType("REAL");

                    b.Property<string>("Descricao")
                        .HasColumnName("DESCRICAO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcons")
                        .HasColumnName("PRCONS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prconsd")
                        .HasColumnName("PRCONSD")
                        .HasColumnType("REAL");

                    b.Property<double?>("Qtde")
                        .HasColumnName("QTDE")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlTotal")
                        .HasColumnName("VL_TOTAL")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TEMP");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Tempo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Desconto")
                        .HasColumnName("DESCONTO")
                        .HasColumnType("REAL");

                    b.Property<string>("Descricao")
                        .HasColumnName("DESCRICAO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Estoque")
                        .HasColumnName("ESTOQUE")
                        .HasColumnType("REAL");

                    b.Property<string>("Pedido")
                        .HasColumnName("PEDIDO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcons")
                        .HasColumnName("PRCONS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Prconsd")
                        .HasColumnName("PRCONSD")
                        .HasColumnType("REAL");

                    b.Property<double?>("Qtde")
                        .HasColumnName("QTDE")
                        .HasColumnType("REAL");

                    b.Property<double?>("VlTotal")
                        .HasColumnName("VL_TOTAL")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TEMPO");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ecf")
                        .HasColumnName("ECF")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ticket1")
                        .HasColumnName("TICKET")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TICKET");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Balcon")
                        .HasColumnName("BALCON")
                        .HasColumnType("TEXT");

                    b.Property<string>("Etiqueta")
                        .HasColumnName("ETIQUETA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filcodi")
                        .HasColumnName("FILCODI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hora")
                        .HasColumnName("HORA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Impresso")
                        .HasColumnName("IMPRESSO")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Prcons")
                        .HasColumnName("PRCONS")
                        .HasColumnType("REAL");

                    b.Property<double?>("Qtde")
                        .HasColumnName("QTDE")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Trdata")
                        .HasColumnName("TRDATA")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("TRANSFER");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO1");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco10", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO10");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco11", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO11");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco12", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO12");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco13", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO13");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco14", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO14");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco15", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO15");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco16", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO16");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco17", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO17");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco18", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO18");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco19", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO19");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO2");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco20", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO20");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO3");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco4", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO4");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco5", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO5");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco6", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO6");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco7", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO7");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco8", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO8");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Troco9", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Initroco")
                        .HasColumnName("INITROCO")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TrocoIni")
                        .HasColumnName("TROCO_INI")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TROCO9");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Urv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<double?>("Valor")
                        .HasColumnName("VALOR")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("URV");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Usefarma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Acesso1")
                        .HasColumnName("ACESSO1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Acesso10")
                        .HasColumnName("ACESSO10")
                        .HasColumnType("TEXT");

                    b.Property<string>("Acesso2")
                        .HasColumnName("ACESSO2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Acesso3")
                        .HasColumnName("ACESSO3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Acesso4")
                        .HasColumnName("ACESSO4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Acesso5")
                        .HasColumnName("ACESSO5")
                        .HasColumnType("TEXT");

                    b.Property<string>("Acesso6")
                        .HasColumnName("ACESSO6")
                        .HasColumnType("TEXT");

                    b.Property<string>("Acesso7")
                        .HasColumnName("ACESSO7")
                        .HasColumnType("TEXT");

                    b.Property<string>("Acesso8")
                        .HasColumnName("ACESSO8")
                        .HasColumnType("TEXT");

                    b.Property<string>("Acesso9")
                        .HasColumnName("ACESSO9")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nivel")
                        .HasColumnName("NIVEL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnName("NOME")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .HasColumnName("SENHA")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("USEFARMA");
                });

            modelBuilder.Entity("Core.Entities.LegacyScaffold.Usoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("DATA")
                        .HasColumnType("datetime");

                    b.Property<string>("Prcodi")
                        .HasColumnName("PRCODI")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Qtde")
                        .HasColumnName("QTDE")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("USOINT");
                });

            modelBuilder.Entity("Core.Entities.Stock.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cnpj")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("Core.Entities.Stock.ProductStockEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockEntryId");

                    b.ToTable("ProductStockEntry");
                });

            modelBuilder.Entity("Core.Entities.Stock.StockEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DrugMaturityDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("LotCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NfEmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NfNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Totalcost")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("StockEntries");
                });

            modelBuilder.Entity("Core.Entities.Stock.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cnpj")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Core.Entities.Catalog.Drug", b =>
                {
                    b.HasBaseType("Core.Entities.Catalog.Product");

                    b.Property<double?>("AbsoluteDosageInMg")
                        .HasColumnType("REAL");

                    b.Property<string>("ActivePrinciple")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BaseDrugId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Classification")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommercialName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DigitalBuleLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dosage")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DrugCost")
                        .HasColumnType("TEXT");

                    b.Property<string>("DrugName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPriceFixed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LotNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManufacturerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrCdse")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PrescriptionNeeded")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StockEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("StockEntryId");

                    b.HasDiscriminator().HasValue("Drug");
                });

            modelBuilder.Entity("Core.Entities.Catalog.DrugInformation", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Drug", "Drug")
                        .WithMany("Druginformation")
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("Core.Entities.Catalog.Product", b =>
                {
                    b.HasOne("Core.Entities.LegacyScaffold.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId");
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductPrice", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductShelfLife", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", null)
                        .WithMany("ShelfLifes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Catalog.ProductSupplier", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Stock.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Client", b =>
                {
                    b.HasOne("Core.Entities.Address", "Address")
                        .WithMany("Clients")
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("Core.Entities.Stock.Manufacturer", b =>
                {
                    b.HasOne("Core.Entities.Address", "Address")
                        .WithMany("Manufacturer")
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("Core.Entities.Stock.ProductStockEntry", b =>
                {
                    b.HasOne("Core.Entities.Catalog.Product", "Product")
                        .WithMany("Stockentries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Stock.StockEntry", "StockEntry")
                        .WithMany()
                        .HasForeignKey("StockEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Stock.StockEntry", b =>
                {
                    b.HasOne("Core.Entities.Stock.Supplier", "Supplier")
                        .WithMany("Stockentries")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Core.Entities.Stock.Supplier", b =>
                {
                    b.HasOne("Core.Entities.Address", "Address")
                        .WithMany("Suppliers")
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("Core.Entities.Catalog.Drug", b =>
                {
                    b.HasOne("Core.Entities.Stock.StockEntry", null)
                        .WithMany("Drugs")
                        .HasForeignKey("StockEntryId");
                });
#pragma warning restore 612, 618
        }
    }
}
